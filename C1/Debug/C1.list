
C1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c8  080057c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014410  20000014  080057e4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014424  080057e4  00024424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c07  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002771  00000000  00000000  00034c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028082  00000000  00000000  00039458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb36  00000000  00000000  000614da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9440  00000000  00000000  00070010  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00169450  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d8  00000000  00000000  001694cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800565c 	.word	0x0800565c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	0800565c 	.word	0x0800565c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001437c 	.word	0x2001437c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b972 	b.w	80005a0 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	4688      	mov	r8, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4615      	mov	r5, r2
 80002e6:	d967      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0720 	rsb	r7, r2, #32
 80002f2:	fa01 f302 	lsl.w	r3, r1, r2
 80002f6:	fa20 f707 	lsr.w	r7, r0, r7
 80002fa:	4095      	lsls	r5, r2
 80002fc:	ea47 0803 	orr.w	r8, r7, r3
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbb8 f7fe 	udiv	r7, r8, lr
 800030c:	fa1f fc85 	uxth.w	ip, r5
 8000310:	fb0e 8817 	mls	r8, lr, r7, r8
 8000314:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000318:	fb07 f10c 	mul.w	r1, r7, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f107 30ff 	add.w	r0, r7, #4294967295
 8000326:	f080 811b 	bcs.w	8000560 <__udivmoddi4+0x28c>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8118 	bls.w	8000560 <__udivmoddi4+0x28c>
 8000330:	3f02      	subs	r7, #2
 8000332:	442b      	add	r3, r5
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0fe 	udiv	r0, r3, lr
 800033c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fc0c 	mul.w	ip, r0, ip
 8000348:	45a4      	cmp	ip, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x290>
 8000356:	45a4      	cmp	ip, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x290>
 800035c:	3802      	subs	r0, #2
 800035e:	442c      	add	r4, r5
 8000360:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	2700      	movs	r7, #0
 800036a:	b11e      	cbz	r6, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c6 4300 	strd	r4, r3, [r6]
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xbe>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80eb 	beq.w	800055a <__udivmoddi4+0x286>
 8000384:	2700      	movs	r7, #0
 8000386:	e9c6 0100 	strd	r0, r1, [r6]
 800038a:	4638      	mov	r0, r7
 800038c:	4639      	mov	r1, r7
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f783 	clz	r7, r3
 8000396:	2f00      	cmp	r7, #0
 8000398:	d147      	bne.n	800042a <__udivmoddi4+0x156>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd0>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80fa 	bhi.w	8000598 <__udivmoddi4+0x2c4>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	4698      	mov	r8, r3
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa0>
 80003b2:	e9c6 4800 	strd	r4, r8, [r6]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa0>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xe8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 808f 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c6:	1b49      	subs	r1, r1, r5
 80003c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003cc:	fa1f f885 	uxth.w	r8, r5
 80003d0:	2701      	movs	r7, #1
 80003d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e0:	fb08 f10c 	mul.w	r1, r8, ip
 80003e4:	4299      	cmp	r1, r3
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e8:	18eb      	adds	r3, r5, r3
 80003ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	f200 80cd 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003f6:	4684      	mov	ip, r0
 80003f8:	1a59      	subs	r1, r3, r1
 80003fa:	b2a3      	uxth	r3, r4
 80003fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000400:	fb0e 1410 	mls	r4, lr, r0, r1
 8000404:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000408:	fb08 f800 	mul.w	r8, r8, r0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x14c>
 8000410:	192c      	adds	r4, r5, r4
 8000412:	f100 33ff 	add.w	r3, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14a>
 8000418:	45a0      	cmp	r8, r4
 800041a:	f200 80b6 	bhi.w	800058a <__udivmoddi4+0x2b6>
 800041e:	4618      	mov	r0, r3
 8000420:	eba4 0408 	sub.w	r4, r4, r8
 8000424:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000428:	e79f      	b.n	800036a <__udivmoddi4+0x96>
 800042a:	f1c7 0c20 	rsb	ip, r7, #32
 800042e:	40bb      	lsls	r3, r7
 8000430:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000434:	ea4e 0e03 	orr.w	lr, lr, r3
 8000438:	fa01 f407 	lsl.w	r4, r1, r7
 800043c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000440:	fa21 f30c 	lsr.w	r3, r1, ip
 8000444:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000448:	4325      	orrs	r5, r4
 800044a:	fbb3 f9f8 	udiv	r9, r3, r8
 800044e:	0c2c      	lsrs	r4, r5, #16
 8000450:	fb08 3319 	mls	r3, r8, r9, r3
 8000454:	fa1f fa8e 	uxth.w	sl, lr
 8000458:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800045c:	fb09 f40a 	mul.w	r4, r9, sl
 8000460:	429c      	cmp	r4, r3
 8000462:	fa02 f207 	lsl.w	r2, r2, r7
 8000466:	fa00 f107 	lsl.w	r1, r0, r7
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1e 0303 	adds.w	r3, lr, r3
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	f080 8087 	bcs.w	8000586 <__udivmoddi4+0x2b2>
 8000478:	429c      	cmp	r4, r3
 800047a:	f240 8084 	bls.w	8000586 <__udivmoddi4+0x2b2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	4473      	add	r3, lr
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	b2ad      	uxth	r5, r5
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000494:	fb00 fa0a 	mul.w	sl, r0, sl
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1e 0404 	adds.w	r4, lr, r4
 80004a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a4:	d26b      	bcs.n	800057e <__udivmoddi4+0x2aa>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d969      	bls.n	800057e <__udivmoddi4+0x2aa>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4474      	add	r4, lr
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c2      	mov	sl, r8
 80004be:	464b      	mov	r3, r9
 80004c0:	d354      	bcc.n	800056c <__udivmoddi4+0x298>
 80004c2:	d051      	beq.n	8000568 <__udivmoddi4+0x294>
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d069      	beq.n	800059c <__udivmoddi4+0x2c8>
 80004c8:	ebb1 050a 	subs.w	r5, r1, sl
 80004cc:	eb64 0403 	sbc.w	r4, r4, r3
 80004d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d4:	40fd      	lsrs	r5, r7
 80004d6:	40fc      	lsrs	r4, r7
 80004d8:	ea4c 0505 	orr.w	r5, ip, r5
 80004dc:	e9c6 5400 	strd	r5, r4, [r6]
 80004e0:	2700      	movs	r7, #0
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ec:	4095      	lsls	r5, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	fa21 f303 	lsr.w	r3, r1, r3
 80004f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004fa:	4338      	orrs	r0, r7
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000502:	fa1f f885 	uxth.w	r8, r5
 8000506:	fb0e 3317 	mls	r3, lr, r7, r3
 800050a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050e:	fb07 f308 	mul.w	r3, r7, r8
 8000512:	428b      	cmp	r3, r1
 8000514:	fa04 f402 	lsl.w	r4, r4, r2
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x256>
 800051a:	1869      	adds	r1, r5, r1
 800051c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000520:	d22f      	bcs.n	8000582 <__udivmoddi4+0x2ae>
 8000522:	428b      	cmp	r3, r1
 8000524:	d92d      	bls.n	8000582 <__udivmoddi4+0x2ae>
 8000526:	3f02      	subs	r7, #2
 8000528:	4429      	add	r1, r5
 800052a:	1acb      	subs	r3, r1, r3
 800052c:	b281      	uxth	r1, r0
 800052e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000532:	fb0e 3310 	mls	r3, lr, r0, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb00 f308 	mul.w	r3, r0, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x27e>
 8000542:	1869      	adds	r1, r5, r1
 8000544:	f100 3cff 	add.w	ip, r0, #4294967295
 8000548:	d217      	bcs.n	800057a <__udivmoddi4+0x2a6>
 800054a:	428b      	cmp	r3, r1
 800054c:	d915      	bls.n	800057a <__udivmoddi4+0x2a6>
 800054e:	3802      	subs	r0, #2
 8000550:	4429      	add	r1, r5
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000558:	e73b      	b.n	80003d2 <__udivmoddi4+0xfe>
 800055a:	4637      	mov	r7, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e709      	b.n	8000374 <__udivmoddi4+0xa0>
 8000560:	4607      	mov	r7, r0
 8000562:	e6e7      	b.n	8000334 <__udivmoddi4+0x60>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x8c>
 8000568:	4541      	cmp	r1, r8
 800056a:	d2ab      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 800056c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000570:	eb69 020e 	sbc.w	r2, r9, lr
 8000574:	3801      	subs	r0, #1
 8000576:	4613      	mov	r3, r2
 8000578:	e7a4      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057a:	4660      	mov	r0, ip
 800057c:	e7e9      	b.n	8000552 <__udivmoddi4+0x27e>
 800057e:	4618      	mov	r0, r3
 8000580:	e795      	b.n	80004ae <__udivmoddi4+0x1da>
 8000582:	4667      	mov	r7, ip
 8000584:	e7d1      	b.n	800052a <__udivmoddi4+0x256>
 8000586:	4681      	mov	r9, r0
 8000588:	e77c      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058a:	3802      	subs	r0, #2
 800058c:	442c      	add	r4, r5
 800058e:	e747      	b.n	8000420 <__udivmoddi4+0x14c>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	442b      	add	r3, r5
 8000596:	e72f      	b.n	80003f8 <__udivmoddi4+0x124>
 8000598:	4638      	mov	r0, r7
 800059a:	e708      	b.n	80003ae <__udivmoddi4+0xda>
 800059c:	4637      	mov	r7, r6
 800059e:	e6e9      	b.n	8000374 <__udivmoddi4+0xa0>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fec6 	bl	800133a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f86b 	bl	8000688 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
 // DWT_CTRL |= (1 << 0);
  SEGGER_SYSVIEW_Conf();
 80005b2:	f003 fb85 	bl	8003cc0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005b6:	f004 fa3d 	bl	8004a34 <SEGGER_SYSVIEW_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8cd 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(Task1_Handler, "WhiteLED", 200, "Hello World From Task-1", 2, &Task1_Handle);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <main+0xc0>)
 80005ca:	22c8      	movs	r2, #200	; 0xc8
 80005cc:	4926      	ldr	r1, [pc, #152]	; (8000668 <main+0xc4>)
 80005ce:	4827      	ldr	r0, [pc, #156]	; (800066c <main+0xc8>)
 80005d0:	f002 f9c6 	bl	8002960 <xTaskCreate>
 80005d4:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00b      	beq.n	80005f4 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e0:	b672      	cpsid	i
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	b662      	cpsie	i
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	e7fe      	b.n	80005f2 <main+0x4e>

  status = xTaskCreate(Task2_Handler, "GreenLED", 200, "Hello World From Task-2", 2, &Task2_Handle);
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <main+0xcc>)
 8000600:	22c8      	movs	r2, #200	; 0xc8
 8000602:	491c      	ldr	r1, [pc, #112]	; (8000674 <main+0xd0>)
 8000604:	481c      	ldr	r0, [pc, #112]	; (8000678 <main+0xd4>)
 8000606:	f002 f9ab 	bl	8002960 <xTaskCreate>
 800060a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00b      	beq.n	800062a <main+0x86>
 8000612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000616:	b672      	cpsid	i
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	b662      	cpsie	i
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e7fe      	b.n	8000628 <main+0x84>

  status = xTaskCreate(Task3_Handler, "ButtonLED", 200, "Hello World From Task-3", 2, &Task3_Handle);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <main+0xd8>)
 8000634:	22c8      	movs	r2, #200	; 0xc8
 8000636:	4912      	ldr	r1, [pc, #72]	; (8000680 <main+0xdc>)
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <main+0xe0>)
 800063a:	f002 f991 	bl	8002960 <xTaskCreate>
 800063e:	61f8      	str	r0, [r7, #28]
    configASSERT(status == pdPASS);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d00b      	beq.n	800065e <main+0xba>
 8000646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064a:	b672      	cpsid	i
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	b662      	cpsie	i
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	e7fe      	b.n	800065c <main+0xb8>

  vTaskStartScheduler();
 800065e:	f002 fb1d 	bl	8002c9c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0xbe>
 8000664:	08005674 	.word	0x08005674
 8000668:	0800568c 	.word	0x0800568c
 800066c:	0800108d 	.word	0x0800108d
 8000670:	08005698 	.word	0x08005698
 8000674:	080056b0 	.word	0x080056b0
 8000678:	080010c5 	.word	0x080010c5
 800067c:	080056bc 	.word	0x080056bc
 8000680:	080056d4 	.word	0x080056d4
 8000684:	08001101 	.word	0x08001101

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 ffd8 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xc8>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xc8>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xc8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xcc>)
 80006ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xcc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80006f4:	230a      	movs	r3, #10
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80006f8:	23d2      	movs	r3, #210	; 0xd2
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f901 	bl	8001910 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000714:	f000 fd2e 	bl	8001174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2105      	movs	r1, #5
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fb8e 	bl	8001e58 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000742:	f000 fd17 	bl	8001174 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b090      	sub	sp, #64	; 0x40
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	4bad      	ldr	r3, [pc, #692]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4aac      	ldr	r2, [pc, #688]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4baa      	ldr	r3, [pc, #680]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
 8000784:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000786:	4ba7      	ldr	r3, [pc, #668]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4aa6      	ldr	r2, [pc, #664]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4ba4      	ldr	r3, [pc, #656]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4ba1      	ldr	r3, [pc, #644]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4aa0      	ldr	r2, [pc, #640]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b9e      	ldr	r3, [pc, #632]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b9b      	ldr	r3, [pc, #620]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a9a      	ldr	r2, [pc, #616]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b98      	ldr	r3, [pc, #608]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b95      	ldr	r3, [pc, #596]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a94      	ldr	r2, [pc, #592]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b92      	ldr	r3, [pc, #584]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b8f      	ldr	r3, [pc, #572]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8e      	ldr	r2, [pc, #568]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8c      	ldr	r3, [pc, #560]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007fe:	4b89      	ldr	r3, [pc, #548]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a88      	ldr	r2, [pc, #544]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b86      	ldr	r3, [pc, #536]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000816:	4b83      	ldr	r3, [pc, #524]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a82      	ldr	r2, [pc, #520]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800081c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b80      	ldr	r3, [pc, #512]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800082e:	4b7d      	ldr	r3, [pc, #500]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a7c      	ldr	r2, [pc, #496]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b7a      	ldr	r3, [pc, #488]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000846:	4b77      	ldr	r3, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a76      	ldr	r2, [pc, #472]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b74      	ldr	r3, [pc, #464]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a70      	ldr	r2, [pc, #448]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b6e      	ldr	r3, [pc, #440]	; (8000a24 <MX_GPIO_Init+0x2cc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2120      	movs	r1, #32
 800087a:	486b      	ldr	r0, [pc, #428]	; (8000a28 <MX_GPIO_Init+0x2d0>)
 800087c:	f001 f82e 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f241 010c 	movw	r1, #4108	; 0x100c
 8000886:	4869      	ldr	r0, [pc, #420]	; (8000a2c <MX_GPIO_Init+0x2d4>)
 8000888:	f001 f828 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2108      	movs	r1, #8
 8000890:	4867      	ldr	r0, [pc, #412]	; (8000a30 <MX_GPIO_Init+0x2d8>)
 8000892:	f001 f823 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4865      	ldr	r0, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x2dc>)
 800089e:	f001 f81d 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	21c8      	movs	r1, #200	; 0xc8
 80008a6:	4864      	ldr	r0, [pc, #400]	; (8000a38 <MX_GPIO_Init+0x2e0>)
 80008a8:	f001 f818 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80008ac:	2310      	movs	r3, #16
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008bc:	230e      	movs	r3, #14
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	485d      	ldr	r0, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x2e4>)
 80008c8:	f000 fe46 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80008cc:	2308      	movs	r3, #8
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008dc:	4619      	mov	r1, r3
 80008de:	4857      	ldr	r0, [pc, #348]	; (8000a3c <MX_GPIO_Init+0x2e4>)
 80008e0:	f000 fe3a 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80008e4:	2304      	movs	r3, #4
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008f4:	2309      	movs	r3, #9
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	484f      	ldr	r0, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x2e4>)
 8000900:	f000 fe2a 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000904:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000916:	230b      	movs	r3, #11
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091e:	4619      	mov	r1, r3
 8000920:	4845      	ldr	r0, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x2e0>)
 8000922:	f000 fe19 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000926:	f64f 7383 	movw	r3, #65411	; 0xff83
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000938:	230c      	movs	r3, #12
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000940:	4619      	mov	r1, r3
 8000942:	483e      	ldr	r0, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x2e4>)
 8000944:	f000 fe08 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000948:	f44f 7340 	mov.w	r3, #768	; 0x300
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095a:	2304      	movs	r3, #4
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	4836      	ldr	r0, [pc, #216]	; (8000a40 <MX_GPIO_Init+0x2e8>)
 8000966:	f000 fdf7 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800096a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800097c:	230a      	movs	r3, #10
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	482e      	ldr	r0, [pc, #184]	; (8000a40 <MX_GPIO_Init+0x2e8>)
 8000988:	f000 fde6 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800098c:	2310      	movs	r3, #16
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800099c:	2302      	movs	r3, #2
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a4:	4619      	mov	r1, r3
 80009a6:	4826      	ldr	r0, [pc, #152]	; (8000a40 <MX_GPIO_Init+0x2e8>)
 80009a8:	f000 fdd6 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80009bc:	2308      	movs	r3, #8
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c4:	4619      	mov	r1, r3
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_GPIO_Init+0x2d0>)
 80009c8:	f000 fdc6 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80009cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009de:	230c      	movs	r3, #12
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e6:	4619      	mov	r1, r3
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_GPIO_Init+0x2ec>)
 80009ea:	f000 fdb5 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80009ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a00:	2301      	movs	r3, #1
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_GPIO_Init+0x2f0>)
 8000a0c:	f000 fda4 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a10:	2360      	movs	r3, #96	; 0x60
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a20:	230d      	movs	r3, #13
 8000a22:	e013      	b.n	8000a4c <MX_GPIO_Init+0x2f4>
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40022000 	.word	0x40022000
 8000a30:	40022800 	.word	0x40022800
 8000a34:	40021c00 	.word	0x40021c00
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a52:	4619      	mov	r1, r3
 8000a54:	48bb      	ldr	r0, [pc, #748]	; (8000d44 <MX_GPIO_Init+0x5ec>)
 8000a56:	f000 fd7f 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	48b4      	ldr	r0, [pc, #720]	; (8000d48 <MX_GPIO_Init+0x5f0>)
 8000a76:	f000 fd6f 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a92:	4619      	mov	r1, r3
 8000a94:	48ac      	ldr	r0, [pc, #688]	; (8000d48 <MX_GPIO_Init+0x5f0>)
 8000a96:	f000 fd5f 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a9a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aac:	230c      	movs	r3, #12
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	48a5      	ldr	r0, [pc, #660]	; (8000d4c <MX_GPIO_Init+0x5f4>)
 8000ab8:	f000 fd4e 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000abc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ace:	230e      	movs	r3, #14
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	489d      	ldr	r0, [pc, #628]	; (8000d50 <MX_GPIO_Init+0x5f8>)
 8000ada:	f000 fd3d 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4897      	ldr	r0, [pc, #604]	; (8000d50 <MX_GPIO_Init+0x5f8>)
 8000af4:	f000 fd30 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000afc:	4b95      	ldr	r3, [pc, #596]	; (8000d54 <MX_GPIO_Init+0x5fc>)
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4893      	ldr	r0, [pc, #588]	; (8000d58 <MX_GPIO_Init+0x600>)
 8000b0c:	f000 fd24 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b10:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b22:	230c      	movs	r3, #12
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	488a      	ldr	r0, [pc, #552]	; (8000d58 <MX_GPIO_Init+0x600>)
 8000b2e:	f000 fd13 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b44:	230a      	movs	r3, #10
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4883      	ldr	r0, [pc, #524]	; (8000d5c <MX_GPIO_Init+0x604>)
 8000b50:	f000 fd02 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b54:	23f0      	movs	r3, #240	; 0xf0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b64:	230a      	movs	r3, #10
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	487c      	ldr	r0, [pc, #496]	; (8000d60 <MX_GPIO_Init+0x608>)
 8000b70:	f000 fcf2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000b74:	23f7      	movs	r3, #247	; 0xf7
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b84:	230e      	movs	r3, #14
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4875      	ldr	r0, [pc, #468]	; (8000d64 <MX_GPIO_Init+0x60c>)
 8000b90:	f000 fce2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ba6:	2309      	movs	r3, #9
 8000ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4866      	ldr	r0, [pc, #408]	; (8000d4c <MX_GPIO_Init+0x5f4>)
 8000bb2:	f000 fcd1 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	485e      	ldr	r0, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x5f4>)
 8000bd4:	f000 fcc0 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	485a      	ldr	r0, [pc, #360]	; (8000d58 <MX_GPIO_Init+0x600>)
 8000bf0:	f000 fcb2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c04:	230d      	movs	r3, #13
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4852      	ldr	r0, [pc, #328]	; (8000d58 <MX_GPIO_Init+0x600>)
 8000c10:	f000 fca2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c14:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	484c      	ldr	r0, [pc, #304]	; (8000d60 <MX_GPIO_Init+0x608>)
 8000c2e:	f000 fc93 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4848      	ldr	r0, [pc, #288]	; (8000d68 <MX_GPIO_Init+0x610>)
 8000c48:	f000 fc86 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c4c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c66:	4619      	mov	r1, r3
 8000c68:	4840      	ldr	r0, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x614>)
 8000c6a:	f000 fc75 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000c6e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c80:	230e      	movs	r3, #14
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4835      	ldr	r0, [pc, #212]	; (8000d60 <MX_GPIO_Init+0x608>)
 8000c8c:	f000 fc64 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000c90:	2308      	movs	r3, #8
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	482f      	ldr	r0, [pc, #188]	; (8000d64 <MX_GPIO_Init+0x60c>)
 8000ca8:	f000 fc56 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cbe:	230d      	movs	r3, #13
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <MX_GPIO_Init+0x5f4>)
 8000cca:	f000 fc45 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <MX_GPIO_Init+0x600>)
 8000ce2:	f000 fc39 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_GPIO_Init+0x600>)
 8000d02:	f000 fc29 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d06:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4815      	ldr	r0, [pc, #84]	; (8000d70 <MX_GPIO_Init+0x618>)
 8000d1c:	f000 fc1c 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d30:	2305      	movs	r3, #5
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <MX_GPIO_Init+0x608>)
 8000d3c:	f000 fc0c 	bl	8001558 <HAL_GPIO_Init>
 8000d40:	e018      	b.n	8000d74 <MX_GPIO_Init+0x61c>
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40021800 	.word	0x40021800
 8000d50:	40022400 	.word	0x40022400
 8000d54:	10120000 	.word	0x10120000
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40022000 	.word	0x40022000
 8000d64:	40022800 	.word	0x40022800
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40021400 	.word	0x40021400
 8000d70:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	48b6      	ldr	r0, [pc, #728]	; (8001068 <MX_GPIO_Init+0x910>)
 8000d8e:	f000 fbe3 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d92:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000da4:	230d      	movs	r3, #13
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	48ae      	ldr	r0, [pc, #696]	; (8001068 <MX_GPIO_Init+0x910>)
 8000db0:	f000 fbd2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	48a7      	ldr	r0, [pc, #668]	; (800106c <MX_GPIO_Init+0x914>)
 8000dd0:	f000 fbc2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de6:	2307      	movs	r3, #7
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	489f      	ldr	r0, [pc, #636]	; (8001070 <MX_GPIO_Init+0x918>)
 8000df2:	f000 fbb1 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	4897      	ldr	r0, [pc, #604]	; (8001070 <MX_GPIO_Init+0x918>)
 8000e14:	f000 fba0 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e1e:	4b95      	ldr	r3, [pc, #596]	; (8001074 <MX_GPIO_Init+0x91c>)
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	488f      	ldr	r0, [pc, #572]	; (800106c <MX_GPIO_Init+0x914>)
 8000e2e:	f000 fb93 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e32:	23c0      	movs	r3, #192	; 0xc0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e42:	2308      	movs	r3, #8
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	488a      	ldr	r0, [pc, #552]	; (8001078 <MX_GPIO_Init+0x920>)
 8000e4e:	f000 fb83 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e52:	2310      	movs	r3, #16
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e62:	230a      	movs	r3, #10
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	487e      	ldr	r0, [pc, #504]	; (8001068 <MX_GPIO_Init+0x910>)
 8000e6e:	f000 fb73 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e72:	2328      	movs	r3, #40	; 0x28
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e82:	230c      	movs	r3, #12
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4876      	ldr	r0, [pc, #472]	; (8001068 <MX_GPIO_Init+0x910>)
 8000e8e:	f000 fb63 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e92:	23c8      	movs	r3, #200	; 0xc8
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4874      	ldr	r0, [pc, #464]	; (800107c <MX_GPIO_Init+0x924>)
 8000eaa:	f000 fb55 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000eae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	486f      	ldr	r0, [pc, #444]	; (8001080 <MX_GPIO_Init+0x928>)
 8000ec4:	f000 fb48 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4865      	ldr	r0, [pc, #404]	; (8001078 <MX_GPIO_Init+0x920>)
 8000ee4:	f000 fb38 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	4619      	mov	r1, r3
 8000f02:	485d      	ldr	r0, [pc, #372]	; (8001078 <MX_GPIO_Init+0x920>)
 8000f04:	f000 fb28 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f08:	2332      	movs	r3, #50	; 0x32
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f18:	230b      	movs	r3, #11
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4855      	ldr	r0, [pc, #340]	; (8001078 <MX_GPIO_Init+0x920>)
 8000f24:	f000 fb18 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f38:	2309      	movs	r3, #9
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4850      	ldr	r0, [pc, #320]	; (8001084 <MX_GPIO_Init+0x92c>)
 8000f44:	f000 fb08 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4848      	ldr	r0, [pc, #288]	; (8001088 <MX_GPIO_Init+0x930>)
 8000f66:	f000 faf7 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	483f      	ldr	r0, [pc, #252]	; (800107c <MX_GPIO_Init+0x924>)
 8000f7e:	f000 faeb 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f82:	2386      	movs	r3, #134	; 0x86
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4834      	ldr	r0, [pc, #208]	; (8001070 <MX_GPIO_Init+0x918>)
 8000f9e:	f000 fadb 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <MX_GPIO_Init+0x918>)
 8000fb6:	f000 facf 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000fba:	2350      	movs	r3, #80	; 0x50
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fca:	230d      	movs	r3, #13
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4826      	ldr	r0, [pc, #152]	; (8001070 <MX_GPIO_Init+0x918>)
 8000fd6:	f000 fabf 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fec:	2304      	movs	r3, #4
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481c      	ldr	r0, [pc, #112]	; (8001068 <MX_GPIO_Init+0x910>)
 8000ff8:	f000 faae 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ffc:	2328      	movs	r3, #40	; 0x28
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800100c:	230a      	movs	r3, #10
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4816      	ldr	r0, [pc, #88]	; (8001070 <MX_GPIO_Init+0x918>)
 8001018:	f000 fa9e 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800101c:	2340      	movs	r3, #64	; 0x40
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800102c:	2309      	movs	r3, #9
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_GPIO_Init+0x910>)
 8001038:	f000 fa8e 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800103c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104e:	2305      	movs	r3, #5
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001056:	4619      	mov	r1, r3
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <MX_GPIO_Init+0x92c>)
 800105a:	f000 fa7d 	bl	8001558 <HAL_GPIO_Init>

}
 800105e:	bf00      	nop
 8001060:	3740      	adds	r7, #64	; 0x40
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021c00 	.word	0x40021c00
 800106c:	40022000 	.word	0x40022000
 8001070:	40020000 	.word	0x40020000
 8001074:	10120000 	.word	0x10120000
 8001078:	40020800 	.word	0x40020800
 800107c:	40021800 	.word	0x40021800
 8001080:	40021400 	.word	0x40021400
 8001084:	40020400 	.word	0x40020400
 8001088:	40020c00 	.word	0x40020c00

0800108c <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* parameter)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

	while(1){

		SEGGER_SYSVIEW_PrintfHost("WhiteLED");
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <Task1_Handler+0x30>)
 8001096:	f004 fa2b 	bl	80054f0 <SEGGER_SYSVIEW_PrintfHost>
		HAL_GPIO_WritePin(ARDUINO_D2_GPIO_Port, ARDUINO_D2_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <Task1_Handler+0x34>)
 80010a0:	f000 fc1c 	bl	80018dc <HAL_GPIO_WritePin>
		vTaskDelay(100/portTICK_PERIOD_MS);
 80010a4:	2064      	movs	r0, #100	; 0x64
 80010a6:	f001 fdbf 	bl	8002c28 <vTaskDelay>
		HAL_GPIO_WritePin(ARDUINO_D2_GPIO_Port, ARDUINO_D2_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <Task1_Handler+0x34>)
 80010b0:	f000 fc14 	bl	80018dc <HAL_GPIO_WritePin>
		vTaskDelay(100/portTICK_PERIOD_MS);
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f001 fdb7 	bl	8002c28 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("WhiteLED");
 80010ba:	e7eb      	b.n	8001094 <Task1_Handler+0x8>
 80010bc:	0800568c 	.word	0x0800568c
 80010c0:	40021800 	.word	0x40021800

080010c4 <Task2_Handler>:
	}

}
static void Task2_Handler(void* parameter)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

	while(1){

				SEGGER_SYSVIEW_PrintfHost("GreenLED");
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <Task2_Handler+0x34>)
 80010ce:	f004 fa0f 	bl	80054f0 <SEGGER_SYSVIEW_PrintfHost>
				HAL_GPIO_WritePin(ARDUINO_D7_GPIO_Port, ARDUINO_D7_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2108      	movs	r1, #8
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <Task2_Handler+0x38>)
 80010d8:	f000 fc00 	bl	80018dc <HAL_GPIO_WritePin>
				vTaskDelay(700/portTICK_PERIOD_MS);
 80010dc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010e0:	f001 fda2 	bl	8002c28 <vTaskDelay>
				HAL_GPIO_WritePin(ARDUINO_D7_GPIO_Port, ARDUINO_D7_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <Task2_Handler+0x38>)
 80010ea:	f000 fbf7 	bl	80018dc <HAL_GPIO_WritePin>
				vTaskDelay(700/portTICK_PERIOD_MS);
 80010ee:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010f2:	f001 fd99 	bl	8002c28 <vTaskDelay>
				SEGGER_SYSVIEW_PrintfHost("GreenLED");
 80010f6:	e7e9      	b.n	80010cc <Task2_Handler+0x8>
 80010f8:	080056b0 	.word	0x080056b0
 80010fc:	40022000 	.word	0x40022000

08001100 <Task3_Handler>:
		}

}

static void Task3_Handler(void* parameter)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

	while(1){

		  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))			//Check if Button Pressed
 8001108:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <Task3_Handler+0x44>)
 800110e:	f000 fbcd 	bl	80018ac <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <Task3_Handler+0x30>
			  {
			  	  SEGGER_SYSVIEW_PrintfHost("ButtonLED");
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <Task3_Handler+0x48>)
 800111a:	f004 f9e9 	bl	80054f0 <SEGGER_SYSVIEW_PrintfHost>
			  	  HAL_GPIO_WritePin(ARDUINO_D4_GPIO_Port, ARDUINO_D4_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <Task3_Handler+0x4c>)
 8001124:	f000 fbda 	bl	80018dc <HAL_GPIO_WritePin>
			  	  vTaskDelay(5/portTICK_PERIOD_MS);
 8001128:	2005      	movs	r0, #5
 800112a:	f001 fd7d 	bl	8002c28 <vTaskDelay>
 800112e:	e7eb      	b.n	8001108 <Task3_Handler+0x8>

			  }
		  else
			  {
			  	  HAL_GPIO_WritePin(ARDUINO_D4_GPIO_Port, ARDUINO_D4_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <Task3_Handler+0x4c>)
 8001136:	f000 fbd1 	bl	80018dc <HAL_GPIO_WritePin>
			  	  vTaskDelay(5/portTICK_PERIOD_MS);
 800113a:	2005      	movs	r0, #5
 800113c:	f001 fd74 	bl	8002c28 <vTaskDelay>
		  if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))			//Check if Button Pressed
 8001140:	e7e2      	b.n	8001108 <Task3_Handler+0x8>
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000
 8001148:	080056d4 	.word	0x080056d4
 800114c:	40021800 	.word	0x40021800

08001150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001162:	f000 f8f7 	bl	8001354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40001000 	.word	0x40001000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x44>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x44>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x44>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_MspInit+0x44>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_MspInit+0x44>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_MspInit+0x44>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80011ba:	f002 f9e7 	bl	800358c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	2036      	movs	r0, #54	; 0x36
 80011e2:	f000 f98f 	bl	8001504 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e6:	2036      	movs	r0, #54	; 0x36
 80011e8:	f000 f9a8 	bl	800153c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_InitTick+0xa0>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_InitTick+0xa0>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_InitTick+0xa0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001204:	f107 0210 	add.w	r2, r7, #16
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f000 ffe0 	bl	80021d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001214:	f000 ffca 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8001218:	4603      	mov	r3, r0
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_InitTick+0xa4>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	3b01      	subs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_InitTick+0xa8>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_InitTick+0xac>)
 8001230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_InitTick+0xa8>)
 8001234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001238:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_InitTick+0xa8>)
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_InitTick+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_InitTick+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <HAL_InitTick+0xa8>)
 800124e:	f000 fff3 	bl	8002238 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d104      	bne.n	8001262 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <HAL_InitTick+0xa8>)
 800125a:	f001 f84f 	bl	80022fc <HAL_TIM_Base_Start_IT>
 800125e:	4603      	mov	r3, r0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3730      	adds	r7, #48	; 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	431bde83 	.word	0x431bde83
 8001274:	2001432c 	.word	0x2001432c
 8001278:	40001000 	.word	0x40001000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM6_DAC_IRQHandler+0x10>)
 80012b6:	f001 f899 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2001432c 	.word	0x2001432c

080012c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001312:	f7ff ffd7 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f004 f95b 	bl	80055d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff f943 	bl	80005a4 <main>
  bx  lr    
 800131e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800132c:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 8001330:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001334:	20014424 	.word	0x20014424

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>

0800133a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133e:	2003      	movs	r0, #3
 8001340:	f000 f8d5 	bl	80014ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ff41 	bl	80011cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff ff1b 	bl	8001184 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20014378 	.word	0x20014378

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20014378 	.word	0x20014378

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0000 	.word	0x05fa0000

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff4c 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001516:	f7ff ff61 	bl	80013dc <__NVIC_GetPriorityGrouping>
 800151a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7ff ffb1 	bl	8001488 <NVIC_EncodePriority>
 8001526:	4602      	mov	r2, r0
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff80 	bl	8001434 <__NVIC_SetPriority>
}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff54 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e175      	b.n	8001864 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8164 	bne.w	800185e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d00b      	beq.n	80015b6 <HAL_GPIO_Init+0x5e>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d007      	beq.n	80015b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x100>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b12      	cmp	r3, #18
 8001656:	d123      	bne.n	80016a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	69b9      	ldr	r1, [r7, #24]
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80be 	beq.w	800185e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_GPIO_Init+0x320>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a64      	ldr	r2, [pc, #400]	; (8001878 <HAL_GPIO_Init+0x320>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_GPIO_Init+0x320>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016fa:	4a60      	ldr	r2, [pc, #384]	; (800187c <HAL_GPIO_Init+0x324>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a57      	ldr	r2, [pc, #348]	; (8001880 <HAL_GPIO_Init+0x328>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d037      	beq.n	8001796 <HAL_GPIO_Init+0x23e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a56      	ldr	r2, [pc, #344]	; (8001884 <HAL_GPIO_Init+0x32c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d031      	beq.n	8001792 <HAL_GPIO_Init+0x23a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a55      	ldr	r2, [pc, #340]	; (8001888 <HAL_GPIO_Init+0x330>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0x236>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_GPIO_Init+0x334>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d025      	beq.n	800178a <HAL_GPIO_Init+0x232>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a53      	ldr	r2, [pc, #332]	; (8001890 <HAL_GPIO_Init+0x338>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01f      	beq.n	8001786 <HAL_GPIO_Init+0x22e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_GPIO_Init+0x33c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x22a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a51      	ldr	r2, [pc, #324]	; (8001898 <HAL_GPIO_Init+0x340>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x226>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a50      	ldr	r2, [pc, #320]	; (800189c <HAL_GPIO_Init+0x344>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x222>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4f      	ldr	r2, [pc, #316]	; (80018a0 <HAL_GPIO_Init+0x348>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x21e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4e      	ldr	r2, [pc, #312]	; (80018a4 <HAL_GPIO_Init+0x34c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x21a>
 800176e:	2309      	movs	r3, #9
 8001770:	e012      	b.n	8001798 <HAL_GPIO_Init+0x240>
 8001772:	230a      	movs	r3, #10
 8001774:	e010      	b.n	8001798 <HAL_GPIO_Init+0x240>
 8001776:	2308      	movs	r3, #8
 8001778:	e00e      	b.n	8001798 <HAL_GPIO_Init+0x240>
 800177a:	2307      	movs	r3, #7
 800177c:	e00c      	b.n	8001798 <HAL_GPIO_Init+0x240>
 800177e:	2306      	movs	r3, #6
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_Init+0x240>
 8001782:	2305      	movs	r3, #5
 8001784:	e008      	b.n	8001798 <HAL_GPIO_Init+0x240>
 8001786:	2304      	movs	r3, #4
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x240>
 800178a:	2303      	movs	r3, #3
 800178c:	e004      	b.n	8001798 <HAL_GPIO_Init+0x240>
 800178e:	2302      	movs	r3, #2
 8001790:	e002      	b.n	8001798 <HAL_GPIO_Init+0x240>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x240>
 8001796:	2300      	movs	r3, #0
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4093      	lsls	r3, r2
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017a8:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_GPIO_Init+0x324>)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017da:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001804:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001858:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	f67f ae86 	bls.w	8001578 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800186c:	bf00      	nop
 800186e:	3724      	adds	r7, #36	; 0x24
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40022400 	.word	0x40022400
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e291      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001940:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x62>
 800194c:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b8d      	ldr	r3, [pc, #564]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x130>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e26b      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x7a>
 800197c:	4b84      	ldr	r3, [pc, #528]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a83      	ldr	r2, [pc, #524]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x9c>
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7e      	ldr	r2, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7b      	ldr	r2, [pc, #492]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a75      	ldr	r2, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 80019d0:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcc4 	bl	800137c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcc0 	bl	800137c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e21f      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fcb0 	bl	800137c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fcac 	bl	800137c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e20b      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x110>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d069      	beq.n	8001b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x190>
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1df      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	493d      	ldr	r1, [pc, #244]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e040      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc62 	bl	800137c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff fc5e 	bl	800137c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1bd      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
 8001aee:	e018      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fc3e 	bl	800137c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fc3a 	bl	800137c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e199      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d038      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d019      	beq.n	8001b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff fc1b 	bl	800137c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fc17 	bl	800137c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e176      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x23a>
 8001b68:	e01a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff fc01 	bl	800137c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fbfd 	bl	800137c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d903      	bls.n	8001b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e15c      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
 8001b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b91      	ldr	r3, [pc, #580]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a4 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a87      	ldr	r2, [pc, #540]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7e      	ldr	r2, [pc, #504]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fbc5 	bl	800137c <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff fbc1 	bl	800137c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e120      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x31a>
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a6e      	ldr	r2, [pc, #440]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x33c>
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a69      	ldr	r2, [pc, #420]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4a66      	ldr	r2, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x35e>
 8001c54:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a60      	ldr	r2, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb75 	bl	800137c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fb71 	bl	800137c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0ce      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x386>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff fb5f 	bl	800137c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fb5b 	bl	800137c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a4 	beq.w	8001e48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d06b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d149      	bne.n	8001da8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb2c 	bl	800137c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fb28 	bl	800137c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e087      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fafc 	bl	800137c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff faf8 	bl	800137c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e057      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x478>
 8001da6:	e04f      	b.n	8001e48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff fae2 	bl	800137c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff fade 	bl	800137c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e03d      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4ac>
 8001dda:	e035      	b.n	8001e48 <HAL_RCC_OscConfig+0x538>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x544>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d028      	beq.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d121      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d0      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0b8      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b50      	ldr	r3, [pc, #320]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	494d      	ldr	r1, [pc, #308]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d040      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e07f      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e073      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06b      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7ff fa16 	bl	800137c <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff fa12 	bl	800137c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e053      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d210      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	4922      	ldr	r1, [pc, #136]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e032      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4916      	ldr	r1, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	f000 f821 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fee:	4601      	mov	r1, r0
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_RCC_ClockConfig+0x1cc>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1d0>)
 8002004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1d4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f8de 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00
 8002020:	40023800 	.word	0x40023800
 8002024:	08005794 	.word	0x08005794
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002046:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_GetSysClockFreq+0x158>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d007      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x32>
 8002052:	2b08      	cmp	r3, #8
 8002054:	d008      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x38>
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 808d 	bne.w	8002176 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b4b      	ldr	r3, [pc, #300]	; (800218c <HAL_RCC_GetSysClockFreq+0x15c>)
 800205e:	60bb      	str	r3, [r7, #8]
      break;
 8002060:	e08c      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002062:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 8002064:	60bb      	str	r3, [r7, #8]
      break;
 8002066:	e089      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002068:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_GetSysClockFreq+0x158>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002070:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002072:	4b45      	ldr	r3, [pc, #276]	; (8002188 <HAL_RCC_GetSysClockFreq+0x158>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d023      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <HAL_RCC_GetSysClockFreq+0x158>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	f240 11ff 	movw	r1, #511	; 0x1ff
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	ea03 0501 	and.w	r5, r3, r1
 8002094:	ea04 0602 	and.w	r6, r4, r2
 8002098:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 800209a:	fb02 f106 	mul.w	r1, r2, r6
 800209e:	2200      	movs	r2, #0
 80020a0:	fb02 f205 	mul.w	r2, r2, r5
 80020a4:	440a      	add	r2, r1
 80020a6:	493a      	ldr	r1, [pc, #232]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 80020a8:	fba5 0101 	umull	r0, r1, r5, r1
 80020ac:	1853      	adds	r3, r2, r1
 80020ae:	4619      	mov	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f04f 0400 	mov.w	r4, #0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4623      	mov	r3, r4
 80020ba:	f7fe f8f3 	bl	80002a4 <__aeabi_uldivmod>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e049      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCC_GetSysClockFreq+0x158>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	099b      	lsrs	r3, r3, #6
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	ea03 0501 	and.w	r5, r3, r1
 80020dc:	ea04 0602 	and.w	r6, r4, r2
 80020e0:	4629      	mov	r1, r5
 80020e2:	4632      	mov	r2, r6
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	0154      	lsls	r4, r2, #5
 80020ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020f2:	014b      	lsls	r3, r1, #5
 80020f4:	4619      	mov	r1, r3
 80020f6:	4622      	mov	r2, r4
 80020f8:	1b49      	subs	r1, r1, r5
 80020fa:	eb62 0206 	sbc.w	r2, r2, r6
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	0194      	lsls	r4, r2, #6
 8002108:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800210c:	018b      	lsls	r3, r1, #6
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	eb64 0402 	sbc.w	r4, r4, r2
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	00e2      	lsls	r2, r4, #3
 800211e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002122:	00d9      	lsls	r1, r3, #3
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	195b      	adds	r3, r3, r5
 800212a:	eb44 0406 	adc.w	r4, r4, r6
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	02a2      	lsls	r2, r4, #10
 8002138:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800213c:	0299      	lsls	r1, r3, #10
 800213e:	460b      	mov	r3, r1
 8002140:	4614      	mov	r4, r2
 8002142:	4618      	mov	r0, r3
 8002144:	4621      	mov	r1, r4
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f04f 0400 	mov.w	r4, #0
 800214c:	461a      	mov	r2, r3
 800214e:	4623      	mov	r3, r4
 8002150:	f7fe f8a8 	bl	80002a4 <__aeabi_uldivmod>
 8002154:	4603      	mov	r3, r0
 8002156:	460c      	mov	r4, r1
 8002158:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_GetSysClockFreq+0x158>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	3301      	adds	r3, #1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	60bb      	str	r3, [r7, #8]
      break;
 8002174:	e002      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002178:	60bb      	str	r3, [r7, #8]
      break;
 800217a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217c:	68bb      	ldr	r3, [r7, #8]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	00f42400 	.word	0x00f42400
 8002190:	017d7840 	.word	0x017d7840

08002194 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b0:	f7ff fff0 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021b4:	4601      	mov	r1, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0a9b      	lsrs	r3, r3, #10
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	080057a4 	.word	0x080057a4

080021d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	220f      	movs	r2, #15
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_RCC_GetClockConfig+0x60>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 020f 	and.w	r2, r3, #15
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e049      	b.n	80022de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f841 	bl	80022e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fa00 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d001      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e054      	b.n	80023be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_TIM_Base_Start_IT+0xd0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d022      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d01d      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d018      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00e      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_TIM_Base_Start_IT+0xe0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x80>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d115      	bne.n	80023a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_TIM_Base_Start_IT+0xec>)
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d015      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0xbe>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d011      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	e008      	b.n	80023ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e000      	b.n	80023bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40010400 	.word	0x40010400
 80023e0:	40014000 	.word	0x40014000
 80023e4:	40001800 	.word	0x40001800
 80023e8:	00010007 	.word	0x00010007

080023ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0202 	mvn.w	r2, #2
 8002418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f905 	bl	800263e <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8f7 	bl	800262a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f908 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0204 	mvn.w	r2, #4
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8db 	bl	800263e <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8cd 	bl	800262a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f8de 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0208 	mvn.w	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8b1 	bl	800263e <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8a3 	bl	800262a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f8b4 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0210 	mvn.w	r2, #16
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2208      	movs	r2, #8
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f887 	bl	800263e <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f879 	bl	800262a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f88a 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0201 	mvn.w	r2, #1
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fdf0 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f91a 	bl	80027d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025aa:	d10e      	bne.n	80025ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b80      	cmp	r3, #128	; 0x80
 80025b8:	d107      	bne.n	80025ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f90d 	bl	80027e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d10e      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d107      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f838 	bl	8002666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	d10e      	bne.n	8002622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d107      	bne.n	8002622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0220 	mvn.w	r2, #32
 800261a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f8cd 	bl	80027bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a40      	ldr	r2, [pc, #256]	; (8002790 <TIM_Base_SetConfig+0x114>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d00f      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3d      	ldr	r2, [pc, #244]	; (8002794 <TIM_Base_SetConfig+0x118>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00b      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <TIM_Base_SetConfig+0x11c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <TIM_Base_SetConfig+0x120>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <TIM_Base_SetConfig+0x124>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <TIM_Base_SetConfig+0x114>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d027      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <TIM_Base_SetConfig+0x118>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d023      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <TIM_Base_SetConfig+0x11c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2a      	ldr	r2, [pc, #168]	; (800279c <TIM_Base_SetConfig+0x120>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01b      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <TIM_Base_SetConfig+0x124>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d017      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <TIM_Base_SetConfig+0x128>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <TIM_Base_SetConfig+0x12c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <TIM_Base_SetConfig+0x130>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <TIM_Base_SetConfig+0x134>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <TIM_Base_SetConfig+0x138>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <TIM_Base_SetConfig+0x13c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <TIM_Base_SetConfig+0x114>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0xf8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <TIM_Base_SetConfig+0x124>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40010400 	.word	0x40010400
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40014800 	.word	0x40014800
 80027b0:	40001800 	.word	0x40001800
 80027b4:	40001c00 	.word	0x40001c00
 80027b8:	40002000 	.word	0x40002000

080027bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f103 0208 	add.w	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0208 	add.w	r2, r3, #8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f103 0208 	add.w	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d103      	bne.n	80028ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e00c      	b.n	80028d4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3308      	adds	r3, #8
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e002      	b.n	80028c8 <vListInsert+0x2e>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d2f6      	bcs.n	80028c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6852      	ldr	r2, [r2, #4]
 800292c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d103      	bne.n	8002940 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af04      	add	r7, sp, #16
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f000 ff93 	bl	80038a0 <pvPortMalloc>
 800297a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002982:	2058      	movs	r0, #88	; 0x58
 8002984:	f000 ff8c 	bl	80038a0 <pvPortMalloc>
 8002988:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
 8002996:	e005      	b.n	80029a4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f001 f863 	bl	8003a64 <vPortFree>
 800299e:	e001      	b.n	80029a4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f80e 	bl	80029e2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029c6:	69f8      	ldr	r0, [r7, #28]
 80029c8:	f000 f8a2 	bl	8002b10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029cc:	2301      	movs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e002      	b.n	80029d8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029d8:	69bb      	ldr	r3, [r7, #24]
    }
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b088      	sub	sp, #32
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	461a      	mov	r2, r3
 80029fa:	21a5      	movs	r1, #165	; 0xa5
 80029fc:	f002 fe26 	bl	800564c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002a0a:	440b      	add	r3, r1
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <prvInitialiseNewTask+0x5a>
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	b672      	cpsid	i
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	b662      	cpsie	i
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e7fe      	b.n	8002a3a <prvInitialiseNewTask+0x58>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01f      	beq.n	8002a82 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e012      	b.n	8002a6e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	7819      	ldrb	r1, [r3, #0]
 8002a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	3334      	adds	r3, #52	; 0x34
 8002a58:	460a      	mov	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d9e9      	bls.n	8002a48 <prvInitialiseNewTask+0x66>
 8002a74:	e000      	b.n	8002a78 <prvInitialiseNewTask+0x96>
            {
                break;
 8002a76:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a80:	e003      	b.n	8002a8a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d901      	bls.n	8002a94 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a90:	2304      	movs	r3, #4
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fec4 	bl	8002838 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff febf 	bl	8002838 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f1c3 0205 	rsb	r2, r3, #5
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	3350      	adds	r3, #80	; 0x50
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fdb7 	bl	800564c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	3354      	adds	r3, #84	; 0x54
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fdb0 	bl	800564c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	69b8      	ldr	r0, [r7, #24]
 8002af2:	f000 fc43 	bl	800337c <pxPortInitialiseStack>
 8002af6:	4602      	mov	r2, r0
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b18:	f000 fd90 	bl	800363c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <prvAddNewTaskToReadyList+0xfc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <prvAddNewTaskToReadyList+0xfc>)
 8002b24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <prvAddNewTaskToReadyList+0x100>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b2e:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <prvAddNewTaskToReadyList+0x100>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b34:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <prvAddNewTaskToReadyList+0xfc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d110      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b3c:	f000 fb0e 	bl	800315c <prvInitialiseTaskLists>
 8002b40:	e00d      	b.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <prvAddNewTaskToReadyList+0x104>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <prvAddNewTaskToReadyList+0x100>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d802      	bhi.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b58:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <prvAddNewTaskToReadyList+0x100>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <prvAddNewTaskToReadyList+0x108>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <prvAddNewTaskToReadyList+0x108>)
 8002b66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <prvAddNewTaskToReadyList+0x108>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <prvAddNewTaskToReadyList+0x94>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fab7 	bl	80050ec <SEGGER_SYSVIEW_OnTaskCreate>
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	461d      	mov	r5, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461c      	mov	r4, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	1ae3      	subs	r3, r4, r3
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	f001 f928 	bl	8003df4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fb24 	bl	80051f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <prvAddNewTaskToReadyList+0x10c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <prvAddNewTaskToReadyList+0x10c>)
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <prvAddNewTaskToReadyList+0x110>)
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff fe3c 	bl	8002852 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bda:	f000 fd61 	bl	80036a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <prvAddNewTaskToReadyList+0x104>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <prvAddNewTaskToReadyList+0x100>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <prvAddNewTaskToReadyList+0x114>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0c:	20000108 	.word	0x20000108
 8002c10:	20000030 	.word	0x20000030
 8002c14:	20000114 	.word	0x20000114
 8002c18:	20000124 	.word	0x20000124
 8002c1c:	20000110 	.word	0x20000110
 8002c20:	20000034 	.word	0x20000034
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01c      	beq.n	8002c74 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <vTaskDelay+0x6c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <vTaskDelay+0x32>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	b672      	cpsid	i
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	b662      	cpsie	i
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	e7fe      	b.n	8002c58 <vTaskDelay+0x30>
            vTaskSuspendAll();
 8002c5a:	f000 f87d 	bl	8002d58 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	2023      	movs	r0, #35	; 0x23
 8002c62:	f001 fe51 	bl	8004908 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c66:	2100      	movs	r1, #0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fb0f 	bl	800328c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c6e:	f000 f881 	bl	8002d74 <xTaskResumeAll>
 8002c72:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <vTaskDelay+0x70>)
 8002c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000130 	.word	0x20000130
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <vTaskStartScheduler+0x9c>)
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2282      	movs	r2, #130	; 0x82
 8002cae:	4923      	ldr	r1, [pc, #140]	; (8002d3c <vTaskStartScheduler+0xa0>)
 8002cb0:	4823      	ldr	r0, [pc, #140]	; (8002d40 <vTaskStartScheduler+0xa4>)
 8002cb2:	f7ff fe55 	bl	8002960 <xTaskCreate>
 8002cb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d125      	bne.n	8002d0a <vTaskStartScheduler+0x6e>
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	b672      	cpsid	i
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	b662      	cpsie	i
 8002cd2:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <vTaskStartScheduler+0xa8>)
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cda:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <vTaskStartScheduler+0xac>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <vTaskStartScheduler+0xb0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <vTaskStartScheduler+0xb4>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <vTaskStartScheduler+0x9c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d102      	bne.n	8002cfa <vTaskStartScheduler+0x5e>
 8002cf4:	f002 f9de 	bl	80050b4 <SEGGER_SYSVIEW_OnIdle>
 8002cf8:	e004      	b.n	8002d04 <vTaskStartScheduler+0x68>
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <vTaskStartScheduler+0xb4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fa36 	bl	8005170 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d04:	f000 fbc6 	bl	8003494 <xPortStartScheduler>
 8002d08:	e00f      	b.n	8002d2a <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d10b      	bne.n	8002d2a <vTaskStartScheduler+0x8e>
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	b672      	cpsid	i
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	b662      	cpsie	i
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	e7fe      	b.n	8002d28 <vTaskStartScheduler+0x8c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <vTaskStartScheduler+0xb8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000012c 	.word	0x2000012c
 8002d3c:	080056e0 	.word	0x080056e0
 8002d40:	0800312d 	.word	0x0800312d
 8002d44:	20000128 	.word	0x20000128
 8002d48:	20000114 	.word	0x20000114
 8002d4c:	2000010c 	.word	0x2000010c
 8002d50:	20000030 	.word	0x20000030
 8002d54:	2000000c 	.word	0x2000000c

08002d58 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <vTaskSuspendAll+0x18>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <vTaskSuspendAll+0x18>)
 8002d64:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20000130 	.word	0x20000130

08002d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d82:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <xTaskResumeAll+0x120>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <xTaskResumeAll+0x2e>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	b672      	cpsid	i
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	b662      	cpsie	i
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	e7fe      	b.n	8002da0 <xTaskResumeAll+0x2c>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002da2:	f000 fc4b 	bl	800363c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <xTaskResumeAll+0x120>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <xTaskResumeAll+0x120>)
 8002dae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <xTaskResumeAll+0x120>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d165      	bne.n	8002e84 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002db8:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <xTaskResumeAll+0x124>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d061      	beq.n	8002e84 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dc0:	e032      	b.n	8002e28 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <xTaskResumeAll+0x128>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3318      	adds	r3, #24
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd9c 	bl	800290c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fd97 	bl	800290c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fa07 	bl	80051f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	2201      	movs	r2, #1
 8002dec:	409a      	lsls	r2, r3
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <xTaskResumeAll+0x12c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <xTaskResumeAll+0x12c>)
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <xTaskResumeAll+0x130>)
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f7ff fd1f 	bl	8002852 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <xTaskResumeAll+0x134>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <xTaskResumeAll+0x138>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <xTaskResumeAll+0x128>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1c8      	bne.n	8002dc2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e36:	f000 fa0d 	bl	8003254 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <xTaskResumeAll+0x13c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e46:	f000 f849 	bl	8002edc <xTaskIncrementTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <xTaskResumeAll+0x138>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f1      	bne.n	8002e46 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <xTaskResumeAll+0x13c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <xTaskResumeAll+0x138>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002e70:	2301      	movs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <xTaskResumeAll+0x140>)
 8002e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e84:	f000 fc0c 	bl	80036a0 <vPortExitCritical>

    return xAlreadyYielded;
 8002e88:	68bb      	ldr	r3, [r7, #8]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000130 	.word	0x20000130
 8002e98:	20000108 	.word	0x20000108
 8002e9c:	200000c8 	.word	0x200000c8
 8002ea0:	20000110 	.word	0x20000110
 8002ea4:	20000034 	.word	0x20000034
 8002ea8:	20000030 	.word	0x20000030
 8002eac:	2000011c 	.word	0x2000011c
 8002eb0:	20000118 	.word	0x20000118
 8002eb4:	e000ed04 	.word	0xe000ed04

08002eb8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ebe:	f000 fcad 	bl	800381c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <xTaskGetTickCountFromISR+0x20>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ecc:	683b      	ldr	r3, [r7, #0]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000010c 	.word	0x2000010c

08002edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <xTaskIncrementTick+0x150>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 8093 	bne.w	8003016 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <xTaskIncrementTick+0x154>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ef8:	4a4d      	ldr	r2, [pc, #308]	; (8003030 <xTaskIncrementTick+0x154>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d121      	bne.n	8002f48 <xTaskIncrementTick+0x6c>
        {
           taskSWITCH_DELAYED_LISTS();
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <xTaskIncrementTick+0x158>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <xTaskIncrementTick+0x4a>
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	b672      	cpsid	i
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	b662      	cpsie	i
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	e7fe      	b.n	8002f24 <xTaskIncrementTick+0x48>
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <xTaskIncrementTick+0x158>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b42      	ldr	r3, [pc, #264]	; (8003038 <xTaskIncrementTick+0x15c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a40      	ldr	r2, [pc, #256]	; (8003034 <xTaskIncrementTick+0x158>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <xTaskIncrementTick+0x15c>)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <xTaskIncrementTick+0x160>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	4a3e      	ldr	r2, [pc, #248]	; (800303c <xTaskIncrementTick+0x160>)
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	f000 f986 	bl	8003254 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f48:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <xTaskIncrementTick+0x164>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d34c      	bcc.n	8002fec <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <xTaskIncrementTick+0x158>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <xTaskIncrementTick+0x164>)
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f62:	601a      	str	r2, [r3, #0]
                    break;
 8002f64:	e042      	b.n	8002fec <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <xTaskIncrementTick+0x158>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d203      	bcs.n	8002f86 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <xTaskIncrementTick+0x164>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f84:	e032      	b.n	8002fec <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fcbe 	bl	800290c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fcb5 	bl	800290c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 f925 	bl	80051f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <xTaskIncrementTick+0x168>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <xTaskIncrementTick+0x168>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <xTaskIncrementTick+0x16c>)
 8002fca:	441a      	add	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7ff fc3d 	bl	8002852 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <xTaskIncrementTick+0x170>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d3b5      	bcc.n	8002f52 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fea:	e7b2      	b.n	8002f52 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <xTaskIncrementTick+0x170>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4915      	ldr	r1, [pc, #84]	; (8003048 <xTaskIncrementTick+0x16c>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d901      	bls.n	8003008 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <xTaskIncrementTick+0x174>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e004      	b.n	8003020 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <xTaskIncrementTick+0x178>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <xTaskIncrementTick+0x178>)
 800301e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003020:	697b      	ldr	r3, [r7, #20]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000130 	.word	0x20000130
 8003030:	2000010c 	.word	0x2000010c
 8003034:	200000c0 	.word	0x200000c0
 8003038:	200000c4 	.word	0x200000c4
 800303c:	20000120 	.word	0x20000120
 8003040:	20000128 	.word	0x20000128
 8003044:	20000110 	.word	0x20000110
 8003048:	20000034 	.word	0x20000034
 800304c:	20000030 	.word	0x20000030
 8003050:	2000011c 	.word	0x2000011c
 8003054:	20000118 	.word	0x20000118

08003058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <vTaskSwitchContext+0xbc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <vTaskSwitchContext+0xc0>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800306c:	e04e      	b.n	800310c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <vTaskSwitchContext+0xc0>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
       taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <vTaskSwitchContext+0xc4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	f1c3 031f 	rsb	r3, r3, #31
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4925      	ldr	r1, [pc, #148]	; (8003120 <vTaskSwitchContext+0xc8>)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <vTaskSwitchContext+0x5e>
        __asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	b672      	cpsid	i
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	b662      	cpsie	i
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	e7fe      	b.n	80030b4 <vTaskSwitchContext+0x5c>
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <vTaskSwitchContext+0xc8>)
 80030c2:	4413      	add	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	3308      	adds	r3, #8
 80030d8:	429a      	cmp	r2, r3
 80030da:	d104      	bne.n	80030e6 <vTaskSwitchContext+0x8e>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <vTaskSwitchContext+0xcc>)
 80030ee:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <vTaskSwitchContext+0xcc>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <vTaskSwitchContext+0xd0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d102      	bne.n	8003102 <vTaskSwitchContext+0xaa>
 80030fc:	f001 ffda 	bl	80050b4 <SEGGER_SYSVIEW_OnIdle>
}
 8003100:	e004      	b.n	800310c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <vTaskSwitchContext+0xcc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 f832 	bl	8005170 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000130 	.word	0x20000130
 8003118:	2000011c 	.word	0x2000011c
 800311c:	20000110 	.word	0x20000110
 8003120:	20000034 	.word	0x20000034
 8003124:	20000030 	.word	0x20000030
 8003128:	2000012c 	.word	0x2000012c

0800312c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003134:	f000 f852 	bl	80031dc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <prvIdleTask+0x28>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d9f9      	bls.n	8003134 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <prvIdleTask+0x2c>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003150:	e7f0      	b.n	8003134 <prvIdleTask+0x8>
 8003152:	bf00      	nop
 8003154:	20000034 	.word	0x20000034
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	e00c      	b.n	8003182 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <prvInitialiseTaskLists+0x60>)
 8003174:	4413      	add	r3, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fb3e 	bl	80027f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3301      	adds	r3, #1
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d9ef      	bls.n	8003168 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <prvInitialiseTaskLists+0x64>)
 800318a:	f7ff fb35 	bl	80027f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800318e:	480d      	ldr	r0, [pc, #52]	; (80031c4 <prvInitialiseTaskLists+0x68>)
 8003190:	f7ff fb32 	bl	80027f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003194:	480c      	ldr	r0, [pc, #48]	; (80031c8 <prvInitialiseTaskLists+0x6c>)
 8003196:	f7ff fb2f 	bl	80027f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <prvInitialiseTaskLists+0x70>)
 800319c:	f7ff fb2c 	bl	80027f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80031a0:	480b      	ldr	r0, [pc, #44]	; (80031d0 <prvInitialiseTaskLists+0x74>)
 80031a2:	f7ff fb29 	bl	80027f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <prvInitialiseTaskLists+0x78>)
 80031a8:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <prvInitialiseTaskLists+0x64>)
 80031aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <prvInitialiseTaskLists+0x7c>)
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <prvInitialiseTaskLists+0x68>)
 80031b0:	601a      	str	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000034 	.word	0x20000034
 80031c0:	20000098 	.word	0x20000098
 80031c4:	200000ac 	.word	0x200000ac
 80031c8:	200000c8 	.word	0x200000c8
 80031cc:	200000dc 	.word	0x200000dc
 80031d0:	200000f4 	.word	0x200000f4
 80031d4:	200000c0 	.word	0x200000c0
 80031d8:	200000c4 	.word	0x200000c4

080031dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031e2:	e019      	b.n	8003218 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80031e4:	f000 fa2a 	bl	800363c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <prvCheckTasksWaitingTermination+0x4c>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fb89 	bl	800290c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <prvCheckTasksWaitingTermination+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3b01      	subs	r3, #1
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <prvCheckTasksWaitingTermination+0x50>)
 8003202:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <prvCheckTasksWaitingTermination+0x54>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <prvCheckTasksWaitingTermination+0x54>)
 800320c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800320e:	f000 fa47 	bl	80036a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f80e 	bl	8003234 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <prvCheckTasksWaitingTermination+0x54>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e1      	bne.n	80031e4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200000dc 	.word	0x200000dc
 800322c:	20000108 	.word	0x20000108
 8003230:	200000f0 	.word	0x200000f0

08003234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fc0f 	bl	8003a64 <vPortFree>
                vPortFree( pxTCB );
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fc0c 	bl	8003a64 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <prvResetNextTaskUnblockTime+0x30>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <prvResetNextTaskUnblockTime+0x34>)
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800326a:	e005      	b.n	8003278 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <prvResetNextTaskUnblockTime+0x30>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <prvResetNextTaskUnblockTime+0x34>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	200000c0 	.word	0x200000c0
 8003288:	20000128 	.word	0x20000128

0800328c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fb32 	bl	800290c <uxListRemove>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	2201      	movs	r2, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <prvAddCurrentTaskToDelayedList+0xdc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4013      	ands	r3, r2
 80032c2:	4a29      	ldr	r2, [pc, #164]	; (8003368 <prvAddCurrentTaskToDelayedList+0xdc>)
 80032c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d110      	bne.n	80032f0 <prvAddCurrentTaskToDelayedList+0x64>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	211b      	movs	r1, #27
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 ffcc 	bl	8005278 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e0:	4b20      	ldr	r3, [pc, #128]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4820      	ldr	r0, [pc, #128]	; (800336c <prvAddCurrentTaskToDelayedList+0xe0>)
 80032ea:	f7ff fab2 	bl	8002852 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80032ee:	e032      	b.n	8003356 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d20f      	bcs.n	8003328 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2104      	movs	r1, #4
 800330e:	4618      	mov	r0, r3
 8003310:	f001 ffb2 	bl	8005278 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7ff faba 	bl	800289a <vListInsert>
}
 8003326:	e016      	b.n	8003356 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2104      	movs	r1, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f001 ffa2 	bl	8005278 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <prvAddCurrentTaskToDelayedList+0xd8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7ff faaa 	bl	800289a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <prvAddCurrentTaskToDelayedList+0xec>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d202      	bcs.n	8003356 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <prvAddCurrentTaskToDelayedList+0xec>)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6013      	str	r3, [r2, #0]
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2000010c 	.word	0x2000010c
 8003364:	20000030 	.word	0x20000030
 8003368:	20000110 	.word	0x20000110
 800336c:	200000f4 	.word	0x200000f4
 8003370:	200000c4 	.word	0x200000c4
 8003374:	200000c0 	.word	0x200000c0
 8003378:	20000128 	.word	0x20000128

0800337c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3b04      	subs	r3, #4
 800338c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003394:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3b04      	subs	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f023 0201 	bic.w	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3b04      	subs	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <pxPortInitialiseStack+0x64>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3b14      	subs	r3, #20
 80033b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3b04      	subs	r3, #4
 80033c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f06f 0202 	mvn.w	r2, #2
 80033ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b20      	subs	r3, #32
 80033d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	080033e5 	.word	0x080033e5

080033e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <prvTaskExitError+0x58>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d00b      	beq.n	8003410 <prvTaskExitError+0x2c>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	b672      	cpsid	i
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	b662      	cpsie	i
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e7fe      	b.n	800340e <prvTaskExitError+0x2a>
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	b672      	cpsid	i
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	b662      	cpsie	i
 8003424:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003426:	bf00      	nop
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0fc      	beq.n	8003428 <prvTaskExitError+0x44>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000010 	.word	0x20000010

08003440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <pxCurrentTCBConst2>)
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	6808      	ldr	r0, [r1, #0]
 8003446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344a:	f380 8809 	msr	PSP, r0
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f380 8811 	msr	BASEPRI, r0
 800345a:	4770      	bx	lr
 800345c:	f3af 8000 	nop.w

08003460 <pxCurrentTCBConst2>:
 8003460:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop

08003468 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003468:	4808      	ldr	r0, [pc, #32]	; (800348c <prvPortStartFirstTask+0x24>)
 800346a:	6800      	ldr	r0, [r0, #0]
 800346c:	6800      	ldr	r0, [r0, #0]
 800346e:	f380 8808 	msr	MSP, r0
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f380 8814 	msr	CONTROL, r0
 800347a:	b662      	cpsie	i
 800347c:	b661      	cpsie	f
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	df00      	svc	0
 8003488:	bf00      	nop
 800348a:	0000      	.short	0x0000
 800348c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop

08003494 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <xPortStartScheduler+0xe0>)
 800349c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	; 0xff
 80034aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <xPortStartScheduler+0xe4>)
 80034c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <xPortStartScheduler+0xe8>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034c8:	e009      	b.n	80034de <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <xPortStartScheduler+0xe8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <xPortStartScheduler+0xe8>)
 80034d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d0ef      	beq.n	80034ca <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <xPortStartScheduler+0xe8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00b      	beq.n	800350e <xPortStartScheduler+0x7a>
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	b672      	cpsid	i
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	b662      	cpsie	i
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	e7fe      	b.n	800350c <xPortStartScheduler+0x78>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <xPortStartScheduler+0xe8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <xPortStartScheduler+0xe8>)
 8003516:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <xPortStartScheduler+0xe8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003520:	4a16      	ldr	r2, [pc, #88]	; (800357c <xPortStartScheduler+0xe8>)
 8003522:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <xPortStartScheduler+0xec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a13      	ldr	r2, [pc, #76]	; (8003580 <xPortStartScheduler+0xec>)
 8003532:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003536:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <xPortStartScheduler+0xec>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a10      	ldr	r2, [pc, #64]	; (8003580 <xPortStartScheduler+0xec>)
 800353e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003544:	f000 f93a 	bl	80037bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <xPortStartScheduler+0xf0>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800354e:	f000 f959 	bl	8003804 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <xPortStartScheduler+0xf4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <xPortStartScheduler+0xf4>)
 8003558:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800355c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800355e:	f7ff ff83 	bl	8003468 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003562:	f7ff fd79 	bl	8003058 <vTaskSwitchContext>
    prvTaskExitError();
 8003566:	f7ff ff3d 	bl	80033e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	e000e400 	.word	0xe000e400
 8003578:	20000134 	.word	0x20000134
 800357c:	20000138 	.word	0x20000138
 8003580:	e000ed20 	.word	0xe000ed20
 8003584:	20000010 	.word	0x20000010
 8003588:	e000ef34 	.word	0xe000ef34

0800358c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
  //  configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <vInitPrioGroupValue+0xa4>)
 8003594:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <vInitPrioGroupValue+0xa8>)
 80035b8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <vInitPrioGroupValue+0xac>)
 80035bc:	2207      	movs	r2, #7
 80035be:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035c0:	e009      	b.n	80035d6 <vInitPrioGroupValue+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <vInitPrioGroupValue+0xac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <vInitPrioGroupValue+0xac>)
 80035ca:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d0ef      	beq.n	80035c2 <vInitPrioGroupValue+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <vInitPrioGroupValue+0xac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d00b      	beq.n	8003606 <vInitPrioGroupValue+0x7a>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	b672      	cpsid	i
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	b662      	cpsie	i
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	e7fe      	b.n	8003604 <vInitPrioGroupValue+0x78>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <vInitPrioGroupValue+0xac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <vInitPrioGroupValue+0xac>)
 800360e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <vInitPrioGroupValue+0xac>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003618:	4a07      	ldr	r2, [pc, #28]	; (8003638 <vInitPrioGroupValue+0xac>)
 800361a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000e400 	.word	0xe000e400
 8003634:	20000134 	.word	0x20000134
 8003638:	20000138 	.word	0x20000138

0800363c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	b672      	cpsid	i
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	b662      	cpsie	i
 8003656:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <vPortEnterCritical+0x5c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <vPortEnterCritical+0x5c>)
 8003660:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <vPortEnterCritical+0x5c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d110      	bne.n	800368c <vPortEnterCritical+0x50>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <vPortEnterCritical+0x60>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <vPortEnterCritical+0x50>
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	b672      	cpsid	i
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	b662      	cpsie	i
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	e7fe      	b.n	800368a <vPortEnterCritical+0x4e>
    }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000010 	.word	0x20000010
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <vPortExitCritical+0x50>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <vPortExitCritical+0x26>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	b672      	cpsid	i
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	b662      	cpsie	i
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	e7fe      	b.n	80036c4 <vPortExitCritical+0x24>
    uxCriticalNesting--;
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <vPortExitCritical+0x50>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <vPortExitCritical+0x50>)
 80036ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <vPortExitCritical+0x50>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <vPortExitCritical+0x42>
 80036d8:	2300      	movs	r3, #0
 80036da:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000010 	.word	0x20000010
	...

08003700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003700:	f3ef 8009 	mrs	r0, PSP
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <pxCurrentTCBConst>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	f01e 0f10 	tst.w	lr, #16
 8003710:	bf08      	it	eq
 8003712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	6010      	str	r0, [r2, #0]
 800371c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003724:	b672      	cpsid	i
 8003726:	f380 8811 	msr	BASEPRI, r0
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	b662      	cpsie	i
 8003734:	f7ff fc90 	bl	8003058 <vTaskSwitchContext>
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f380 8811 	msr	BASEPRI, r0
 8003740:	bc09      	pop	{r0, r3}
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	6808      	ldr	r0, [r1, #0]
 8003746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374a:	f01e 0f10 	tst.w	lr, #16
 800374e:	bf08      	it	eq
 8003750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003754:	f380 8809 	msr	PSP, r0
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop

08003760 <pxCurrentTCBConst>:
 8003760:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop

08003768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
        __asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	b672      	cpsid	i
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	b662      	cpsie	i
 8003782:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003784:	f001 fc1c 	bl	8004fc0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003788:	f7ff fba8 	bl	8002edc <xTaskIncrementTick>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <SysTick_Handler+0x38>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003792:	f001 fc73 	bl	800507c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <SysTick_Handler+0x50>)
 8003798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e001      	b.n	80037a4 <SysTick_Handler+0x3c>
        }
		else
		{
			traceISR_EXIT();
 80037a0:	f001 fc50 	bl	8005044 <SEGGER_SYSVIEW_RecordExitISR>
 80037a4:	2300      	movs	r3, #0
 80037a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <vPortSetupTimerInterrupt+0x34>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <vPortSetupTimerInterrupt+0x38>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <vPortSetupTimerInterrupt+0x3c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <vPortSetupTimerInterrupt+0x40>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	099b      	lsrs	r3, r3, #6
 80037d8:	4a09      	ldr	r2, [pc, #36]	; (8003800 <vPortSetupTimerInterrupt+0x44>)
 80037da:	3b01      	subs	r3, #1
 80037dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <vPortSetupTimerInterrupt+0x34>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e010 	.word	0xe000e010
 80037f4:	e000e018 	.word	0xe000e018
 80037f8:	20000000 	.word	0x20000000
 80037fc:	10624dd3 	.word	0x10624dd3
 8003800:	e000e014 	.word	0xe000e014

08003804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003814 <vPortEnableVFP+0x10>
 8003808:	6801      	ldr	r1, [r0, #0]
 800380a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800380e:	6001      	str	r1, [r0, #0]
 8003810:	4770      	bx	lr
 8003812:	0000      	.short	0x0000
 8003814:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop

0800381c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003822:	f3ef 8305 	mrs	r3, IPSR
 8003826:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	d915      	bls.n	800385a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <vPortValidateInterruptPriority+0x74>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <vPortValidateInterruptPriority+0x78>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	7afa      	ldrb	r2, [r7, #11]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20b      	bcs.n	800385a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	b672      	cpsid	i
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	b662      	cpsie	i
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	e7fe      	b.n	8003858 <vPortValidateInterruptPriority+0x3c>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <vPortValidateInterruptPriority+0x7c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <vPortValidateInterruptPriority+0x80>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d90b      	bls.n	8003882 <vPortValidateInterruptPriority+0x66>
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	b672      	cpsid	i
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	b662      	cpsie	i
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	e7fe      	b.n	8003880 <vPortValidateInterruptPriority+0x64>
    }
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e3f0 	.word	0xe000e3f0
 8003894:	20000134 	.word	0x20000134
 8003898:	e000ed0c 	.word	0xe000ed0c
 800389c:	20000138 	.word	0x20000138

080038a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80038ac:	f7ff fa54 	bl	8002d58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80038b0:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <pvPortMalloc+0x1ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80038b8:	f000 f938 	bl	8003b2c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038bc:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <pvPortMalloc+0x1b0>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 80a9 	bne.w	8003a1c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d02e      	beq.n	800392e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80038d0:	2208      	movs	r2, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d228      	bcs.n	800392e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80038dc:	2208      	movs	r2, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d022      	beq.n	8003934 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f023 0307 	bic.w	r3, r3, #7
 80038f4:	3308      	adds	r3, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d215      	bcs.n	8003928 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f023 0307 	bic.w	r3, r3, #7
 8003902:	3308      	adds	r3, #8
 8003904:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d011      	beq.n	8003934 <pvPortMalloc+0x94>
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	b672      	cpsid	i
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	b662      	cpsie	i
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e7fe      	b.n	8003926 <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800392c:	e002      	b.n	8003934 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	e000      	b.n	8003936 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003934:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d06f      	beq.n	8003a1c <pvPortMalloc+0x17c>
 800393c:	4b45      	ldr	r3, [pc, #276]	; (8003a54 <pvPortMalloc+0x1b4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d86a      	bhi.n	8003a1c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003946:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <pvPortMalloc+0x1b8>)
 8003948:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <pvPortMalloc+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003950:	e004      	b.n	800395c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d903      	bls.n	800396e <pvPortMalloc+0xce>
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f1      	bne.n	8003952 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <pvPortMalloc+0x1ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	429a      	cmp	r2, r3
 8003976:	d051      	beq.n	8003a1c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2208      	movs	r2, #8
 800397e:	4413      	add	r3, r2
 8003980:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad2      	subs	r2, r2, r3
 8003992:	2308      	movs	r3, #8
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	429a      	cmp	r2, r3
 8003998:	d920      	bls.n	80039dc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <pvPortMalloc+0x124>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	b672      	cpsid	i
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	b662      	cpsie	i
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e7fe      	b.n	80039c2 <pvPortMalloc+0x122>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039d6:	69b8      	ldr	r0, [r7, #24]
 80039d8:	f000 f90a 	bl	8003bf0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <pvPortMalloc+0x1b4>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <pvPortMalloc+0x1b4>)
 80039e8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <pvPortMalloc+0x1b4>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <pvPortMalloc+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d203      	bcs.n	80039fe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <pvPortMalloc+0x1b4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <pvPortMalloc+0x1bc>)
 80039fc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <pvPortMalloc+0x1b0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <pvPortMalloc+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <pvPortMalloc+0x1c0>)
 8003a1a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003a1c:	f7ff f9aa 	bl	8002d74 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <pvPortMalloc+0x1a2>
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	b672      	cpsid	i
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	b662      	cpsie	i
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e7fe      	b.n	8003a40 <pvPortMalloc+0x1a0>
    return pvReturn;
 8003a42:	69fb      	ldr	r3, [r7, #28]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20012d44 	.word	0x20012d44
 8003a50:	20012d58 	.word	0x20012d58
 8003a54:	20012d48 	.word	0x20012d48
 8003a58:	20012d3c 	.word	0x20012d3c
 8003a5c:	20012d4c 	.word	0x20012d4c
 8003a60:	20012d50 	.word	0x20012d50

08003a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04f      	beq.n	8003b16 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003a76:	2308      	movs	r3, #8
 8003a78:	425b      	negs	r3, r3
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <vPortFree+0xbc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <vPortFree+0x46>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	b672      	cpsid	i
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	b662      	cpsie	i
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e7fe      	b.n	8003aa8 <vPortFree+0x44>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <vPortFree+0x66>
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	b672      	cpsid	i
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	b662      	cpsie	i
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	e7fe      	b.n	8003ac8 <vPortFree+0x64>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <vPortFree+0xbc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01e      	beq.n	8003b16 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11a      	bne.n	8003b16 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <vPortFree+0xbc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003af0:	f7ff f932 	bl	8002d58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <vPortFree+0xc0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <vPortFree+0xc0>)
 8003b00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b02:	6938      	ldr	r0, [r7, #16]
 8003b04:	f000 f874 	bl	8003bf0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <vPortFree+0xc4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a06      	ldr	r2, [pc, #24]	; (8003b28 <vPortFree+0xc4>)
 8003b10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003b12:	f7ff f92f 	bl	8002d74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20012d58 	.word	0x20012d58
 8003b24:	20012d48 	.word	0x20012d48
 8003b28:	20012d54 	.word	0x20012d54

08003b2c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b32:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003b36:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <prvHeapInit+0xac>)
 8003b3a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00c      	beq.n	8003b60 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3307      	adds	r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0307 	bic.w	r3, r3, #7
 8003b52:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <prvHeapInit+0xac>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <prvHeapInit+0xb0>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <prvHeapInit+0xb0>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4413      	add	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003b78:	2208      	movs	r2, #8
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0307 	bic.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <prvHeapInit+0xb4>)
 8003b8c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <prvHeapInit+0xb4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <prvHeapInit+0xb4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	1ad2      	subs	r2, r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <prvHeapInit+0xb4>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <prvHeapInit+0xb8>)
 8003bba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <prvHeapInit+0xbc>)
 8003bc2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <prvHeapInit+0xc0>)
 8003bc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bca:	601a      	str	r2, [r3, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	2000013c 	.word	0x2000013c
 8003bdc:	20012d3c 	.word	0x20012d3c
 8003be0:	20012d44 	.word	0x20012d44
 8003be4:	20012d4c 	.word	0x20012d4c
 8003be8:	20012d48 	.word	0x20012d48
 8003bec:	20012d58 	.word	0x20012d58

08003bf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <prvInsertBlockIntoFreeList+0xac>)
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e002      	b.n	8003c04 <prvInsertBlockIntoFreeList+0x14>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d8f7      	bhi.n	8003bfe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4413      	add	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d108      	bne.n	8003c32 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d118      	bne.n	8003c78 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <prvInsertBlockIntoFreeList+0xb0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d00d      	beq.n	8003c6e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e008      	b.n	8003c80 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <prvInsertBlockIntoFreeList+0xb0>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e003      	b.n	8003c80 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d002      	beq.n	8003c8e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20012d3c 	.word	0x20012d3c
 8003ca0:	20012d44 	.word	0x20012d44

08003ca4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003ca8:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <_cbSendSystemDesc+0x14>)
 8003caa:	f001 f935 	bl	8004f18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003cae:	4803      	ldr	r0, [pc, #12]	; (8003cbc <_cbSendSystemDesc+0x18>)
 8003cb0:	f001 f932 	bl	8004f18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	080056e8 	.word	0x080056e8
 8003cbc:	0800570c 	.word	0x0800570c

08003cc0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003cca:	6819      	ldr	r1, [r3, #0]
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <SEGGER_SYSVIEW_Conf+0x24>)
 8003cce:	4a06      	ldr	r2, [pc, #24]	; (8003ce8 <SEGGER_SYSVIEW_Conf+0x28>)
 8003cd0:	f000 fda8 	bl	8004824 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003cd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003cd8:	f000 fde8 	bl	80048ac <SEGGER_SYSVIEW_SetRAMBase>
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000000 	.word	0x20000000
 8003ce4:	08003ca5 	.word	0x08003ca5
 8003ce8:	080057ac 	.word	0x080057ac

08003cec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	e034      	b.n	8003d62 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003cf8:	491e      	ldr	r1, [pc, #120]	; (8003d74 <_cbSendTaskList+0x88>)
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	491a      	ldr	r1, [pc, #104]	; (8003d74 <_cbSendTaskList+0x88>)
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3304      	adds	r3, #4
 8003d18:	681c      	ldr	r4, [r3, #0]
 8003d1a:	4916      	ldr	r1, [pc, #88]	; (8003d74 <_cbSendTaskList+0x88>)
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3308      	adds	r3, #8
 8003d2a:	681d      	ldr	r5, [r3, #0]
 8003d2c:	4911      	ldr	r1, [pc, #68]	; (8003d74 <_cbSendTaskList+0x88>)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	681e      	ldr	r6, [r3, #0]
 8003d3e:	490d      	ldr	r1, [pc, #52]	; (8003d74 <_cbSendTaskList+0x88>)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3310      	adds	r3, #16
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	4633      	mov	r3, r6
 8003d54:	462a      	mov	r2, r5
 8003d56:	4621      	mov	r1, r4
 8003d58:	f000 f8b4 	bl	8003ec4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <_cbSendTaskList+0x8c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3c5      	bcc.n	8003cf8 <_cbSendTaskList+0xc>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d74:	20012d5c 	.word	0x20012d5c
 8003d78:	20012dfc 	.word	0x20012dfc

08003d7c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003d82:	f7ff f899 	bl	8002eb8 <xTaskGetTickCountFromISR>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003d90:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003d94:	462b      	mov	r3, r5
 8003d96:	4634      	mov	r4, r6
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	0162      	lsls	r2, r4, #5
 8003da2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003da6:	0159      	lsls	r1, r3, #5
 8003da8:	460b      	mov	r3, r1
 8003daa:	4614      	mov	r4, r2
 8003dac:	1b5b      	subs	r3, r3, r5
 8003dae:	eb64 0406 	sbc.w	r4, r4, r6
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	00a2      	lsls	r2, r4, #2
 8003dbc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003dc0:	0099      	lsls	r1, r3, #2
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	195b      	adds	r3, r3, r5
 8003dc8:	eb44 0406 	adc.w	r4, r4, r6
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	00e2      	lsls	r2, r4, #3
 8003dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dda:	00d9      	lsls	r1, r3, #3
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4614      	mov	r4, r2
 8003de0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003de4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	4621      	mov	r1, r4
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003df4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e02:	2205      	movs	r2, #5
 8003e04:	492b      	ldr	r1, [pc, #172]	; (8003eb4 <SYSVIEW_AddTask+0xc0>)
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f001 fc06 	bl	8005618 <memcmp>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04b      	beq.n	8003eaa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b07      	cmp	r3, #7
 8003e18:	d903      	bls.n	8003e22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003e1a:	4828      	ldr	r0, [pc, #160]	; (8003ebc <SYSVIEW_AddTask+0xc8>)
 8003e1c:	f001 fb7c 	bl	8005518 <SEGGER_SYSVIEW_Warn>
    return;
 8003e20:	e044      	b.n	8003eac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <SYSVIEW_AddTask+0xcc>)
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <SYSVIEW_AddTask+0xcc>)
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3304      	adds	r3, #4
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	491b      	ldr	r1, [pc, #108]	; (8003ec0 <SYSVIEW_AddTask+0xcc>)
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4916      	ldr	r1, [pc, #88]	; (8003ec0 <SYSVIEW_AddTask+0xcc>)
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	330c      	adds	r3, #12
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4910      	ldr	r1, [pc, #64]	; (8003ec0 <SYSVIEW_AddTask+0xcc>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3310      	adds	r3, #16
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <SYSVIEW_AddTask+0xc4>)
 8003e96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f80e 	bl	8003ec4 <SYSVIEW_SendTaskInfo>
 8003ea8:	e000      	b.n	8003eac <SYSVIEW_AddTask+0xb8>
    return;
 8003eaa:	bf00      	nop

}
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0800571c 	.word	0x0800571c
 8003eb8:	20012dfc 	.word	0x20012dfc
 8003ebc:	08005724 	.word	0x08005724
 8003ec0:	20012d5c 	.word	0x20012d5c

08003ec4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ed2:	f107 0314 	add.w	r3, r7, #20
 8003ed6:	2214      	movs	r2, #20
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fbb6 	bl	800564c <memset>
  TaskInfo.TaskID     = TaskID;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 ff15 	bl	8004d28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003efe:	bf00      	nop
 8003f00:	3728      	adds	r7, #40	; 0x28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <_DoInit+0x98>)
 8003f10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <_DoInit+0x9c>)
 8003f22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <_DoInit+0xa0>)
 8003f28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <_DoInit+0x9c>)
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a17      	ldr	r2, [pc, #92]	; (8003fac <_DoInit+0xa4>)
 8003f4e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2210      	movs	r2, #16
 8003f54:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3307      	adds	r3, #7
 8003f6c:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <_DoInit+0xa8>)
 8003f6e:	6810      	ldr	r0, [r2, #0]
 8003f70:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003f72:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <_DoInit+0xac>)
 8003f7a:	6810      	ldr	r0, [r2, #0]
 8003f7c:	6018      	str	r0, [r3, #0]
 8003f7e:	8891      	ldrh	r1, [r2, #4]
 8003f80:	7992      	ldrb	r2, [r2, #6]
 8003f82:	8099      	strh	r1, [r3, #4]
 8003f84:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003f86:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003f90:	f3bf 8f5f 	dmb	sy
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	2001437c 	.word	0x2001437c
 8003fa4:	08005774 	.word	0x08005774
 8003fa8:	20012e00 	.word	0x20012e00
 8003fac:	20013200 	.word	0x20013200
 8003fb0:	08005780 	.word	0x08005780
 8003fb4:	08005784 	.word	0x08005784

08003fb8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	; 0x30
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003fc4:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003fd2:	f7ff ff99 	bl	8003f08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3360      	adds	r3, #96	; 0x60
 8003fe2:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	429a      	cmp	r2, r3
 8004002:	d92b      	bls.n	800405c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4293      	cmp	r3, r2
 8004014:	bf28      	it	cs
 8004016:	4613      	movcs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	4413      	add	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	6939      	ldr	r1, [r7, #16]
 8004028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800402a:	f001 fb04 	bl	8005636 <memcpy>
    NumBytesRead += NumBytesRem;
 800402e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4413      	add	r3, r2
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4413      	add	r3, r2
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	429a      	cmp	r2, r3
 8004056:	d101      	bne.n	800405c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004058:	2300      	movs	r3, #0
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4293      	cmp	r3, r2
 800406a:	bf28      	it	cs
 800406c:	4613      	movcs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	4413      	add	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	6939      	ldr	r1, [r7, #16]
 8004084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004086:	f001 fad6 	bl	8005636 <memcpy>
    NumBytesRead += NumBytesRem;
 800408a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4413      	add	r3, r2
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4413      	add	r3, r2
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4413      	add	r3, r2
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3730      	adds	r7, #48	; 0x30
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	2001437c 	.word	0x2001437c

080040c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80040e0:	f7ff ff12 	bl	8003f08 <_DoInit>
  SEGGER_RTT_LOCK();
 80040e4:	f3ef 8311 	mrs	r3, BASEPRI
 80040e8:	f04f 0120 	mov.w	r1, #32
 80040ec:	f381 8811 	msr	BASEPRI, r1
 80040f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040f2:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80040f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	440b      	add	r3, r1
 800410a:	3304      	adds	r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3301      	adds	r3, #1
 8004116:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	429a      	cmp	r2, r3
 8004120:	dbeb      	blt.n	80040fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8004122:	e000      	b.n	8004126 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004124:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	429a      	cmp	r2, r3
 800412e:	da3f      	bge.n	80041b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004130:	6939      	ldr	r1, [r7, #16]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	440b      	add	r3, r1
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	3304      	adds	r3, #4
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800415a:	6939      	ldr	r1, [r7, #16]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	440b      	add	r3, r1
 8004168:	3320      	adds	r3, #32
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800416e:	6939      	ldr	r1, [r7, #16]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	440b      	add	r3, r1
 800417c:	3328      	adds	r3, #40	; 0x28
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004182:	6939      	ldr	r1, [r7, #16]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	332c      	adds	r3, #44	; 0x2c
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041aa:	f3bf 8f5f 	dmb	sy
 80041ae:	e002      	b.n	80041b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80041bc:	69fb      	ldr	r3, [r7, #28]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2001437c 	.word	0x2001437c

080041cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80041dc:	623b      	str	r3, [r7, #32]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80041e8:	f7ff fe8e 	bl	8003f08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041ec:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80041ee:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d82c      	bhi.n	8004250 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80041f6:	f3ef 8311 	mrs	r3, BASEPRI
 80041fa:	f04f 0120 	mov.w	r1, #32
 80041fe:	f381 8811 	msr	BASEPRI, r1
 8004202:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	3360      	adds	r3, #96	; 0x60
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	4413      	add	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00e      	beq.n	800423a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004240:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800424a:	2300      	movs	r3, #0
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
 800424e:	e002      	b.n	8004256 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004258:	4618      	mov	r0, r3
 800425a:	3728      	adds	r7, #40	; 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	2001437c 	.word	0x2001437c

08004264 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00f      	beq.n	800429a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800427a:	e002      	b.n	8004282 <_EncodeStr+0x1e>
      Len++;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	3301      	adds	r3, #1
 8004280:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f6      	bne.n	800427c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d901      	bls.n	800429a <_EncodeStr+0x36>
      Len = Limit;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2bfe      	cmp	r3, #254	; 0xfe
 800429e:	d806      	bhi.n	80042ae <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	60fa      	str	r2, [r7, #12]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e011      	b.n	80042d2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	60fa      	str	r2, [r7, #12]
 80042b4:	22ff      	movs	r2, #255	; 0xff
 80042b6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	60fa      	str	r2, [r7, #12]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	0a19      	lsrs	r1, r3, #8
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	60fa      	str	r2, [r7, #12]
 80042ce:	b2ca      	uxtb	r2, r1
 80042d0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80042d6:	e00a      	b.n	80042ee <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	1c53      	adds	r3, r2, #1
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	60f9      	str	r1, [r7, #12]
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	701a      	strb	r2, [r3, #0]
    n++;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3301      	adds	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d3f0      	bcc.n	80042d8 <_EncodeStr+0x74>
  }
  return pPayload;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <_HandleIncomingPacket+0xd4>)
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	4618      	mov	r0, r3
 8004328:	1cfb      	adds	r3, r7, #3
 800432a:	2201      	movs	r2, #1
 800432c:	4619      	mov	r1, r3
 800432e:	f7ff fe43 	bl	8003fb8 <SEGGER_RTT_ReadNoLock>
 8004332:	4603      	mov	r3, r0
 8004334:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	dd4d      	ble.n	80043d8 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d022      	beq.n	8004388 <_HandleIncomingPacket+0x6c>
 8004342:	2b05      	cmp	r3, #5
 8004344:	dc0b      	bgt.n	800435e <_HandleIncomingPacket+0x42>
 8004346:	2b02      	cmp	r3, #2
 8004348:	d015      	beq.n	8004376 <_HandleIncomingPacket+0x5a>
 800434a:	2b02      	cmp	r3, #2
 800434c:	dc02      	bgt.n	8004354 <_HandleIncomingPacket+0x38>
 800434e:	2b01      	cmp	r3, #1
 8004350:	d00e      	beq.n	8004370 <_HandleIncomingPacket+0x54>
 8004352:	e034      	b.n	80043be <_HandleIncomingPacket+0xa2>
 8004354:	2b03      	cmp	r3, #3
 8004356:	d011      	beq.n	800437c <_HandleIncomingPacket+0x60>
 8004358:	2b04      	cmp	r3, #4
 800435a:	d012      	beq.n	8004382 <_HandleIncomingPacket+0x66>
 800435c:	e02f      	b.n	80043be <_HandleIncomingPacket+0xa2>
 800435e:	2b07      	cmp	r3, #7
 8004360:	d018      	beq.n	8004394 <_HandleIncomingPacket+0x78>
 8004362:	2b07      	cmp	r3, #7
 8004364:	db13      	blt.n	800438e <_HandleIncomingPacket+0x72>
 8004366:	2b7f      	cmp	r3, #127	; 0x7f
 8004368:	d038      	beq.n	80043dc <_HandleIncomingPacket+0xc0>
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d015      	beq.n	800439a <_HandleIncomingPacket+0x7e>
 800436e:	e026      	b.n	80043be <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004370:	f000 fb60 	bl	8004a34 <SEGGER_SYSVIEW_Start>
      break;
 8004374:	e037      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004376:	f000 fc17 	bl	8004ba8 <SEGGER_SYSVIEW_Stop>
      break;
 800437a:	e034      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800437c:	f000 fdf0 	bl	8004f60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004380:	e031      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004382:	f000 fdb5 	bl	8004ef0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004386:	e02e      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004388:	f000 fc34 	bl	8004bf4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800438c:	e02b      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800438e:	f001 f871 	bl	8005474 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004392:	e028      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004394:	f001 f850 	bl	8005438 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004398:	e025      	b.n	80043e6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <_HandleIncomingPacket+0xd4>)
 800439c:	7e1b      	ldrb	r3, [r3, #24]
 800439e:	4618      	mov	r0, r3
 80043a0:	1cfb      	adds	r3, r7, #3
 80043a2:	2201      	movs	r2, #1
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7ff fe07 	bl	8003fb8 <SEGGER_RTT_ReadNoLock>
 80043aa:	4603      	mov	r3, r0
 80043ac:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	dd15      	ble.n	80043e0 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 ffbe 	bl	8005338 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80043bc:	e010      	b.n	80043e0 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0e      	bge.n	80043e4 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <_HandleIncomingPacket+0xd4>)
 80043c8:	7e1b      	ldrb	r3, [r3, #24]
 80043ca:	4618      	mov	r0, r3
 80043cc:	1cfb      	adds	r3, r7, #3
 80043ce:	2201      	movs	r2, #1
 80043d0:	4619      	mov	r1, r3
 80043d2:	f7ff fdf1 	bl	8003fb8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80043d6:	e005      	b.n	80043e4 <_HandleIncomingPacket+0xc8>
    }
  }
 80043d8:	bf00      	nop
 80043da:	e004      	b.n	80043e6 <_HandleIncomingPacket+0xca>
      break;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <_HandleIncomingPacket+0xca>
      break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <_HandleIncomingPacket+0xca>
      break;
 80043e4:	bf00      	nop
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20014218 	.word	0x20014218

080043f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80043fa:	2301      	movs	r3, #1
 80043fc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	3301      	adds	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	e00b      	b.n	8004428 <_TrySendOverflowPacket+0x34>
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	b2da      	uxtb	r2, r3
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	1c59      	adds	r1, r3, #1
 8004418:	62f9      	str	r1, [r7, #44]	; 0x2c
 800441a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	09db      	lsrs	r3, r3, #7
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	2b7f      	cmp	r3, #127	; 0x7f
 800442c:	d8f0      	bhi.n	8004410 <_TrySendOverflowPacket+0x1c>
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <_TrySendOverflowPacket+0xe0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	e00b      	b.n	8004470 <_TrySendOverflowPacket+0x7c>
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	6279      	str	r1, [r7, #36]	; 0x24
 8004462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	09db      	lsrs	r3, r3, #7
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2b7f      	cmp	r3, #127	; 0x7f
 8004474:	d8f0      	bhi.n	8004458 <_TrySendOverflowPacket+0x64>
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	627a      	str	r2, [r7, #36]	; 0x24
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	4618      	mov	r0, r3
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	1d3b      	adds	r3, r7, #4
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	461a      	mov	r2, r3
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	4619      	mov	r1, r3
 8004498:	f7fb feba 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800449c:	4603      	mov	r3, r0
 800449e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e004      	b.n	80044c4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <_TrySendOverflowPacket+0xdc>)
 80044c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80044c4:	693b      	ldr	r3, [r7, #16]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3730      	adds	r7, #48	; 0x30
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20014218 	.word	0x20014218
 80044d4:	e0001004 	.word	0xe0001004

080044d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80044e4:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <_SendPacket+0x1c0>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d010      	beq.n	800450e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80044ec:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <_SendPacket+0x1c0>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a3 	beq.w	800463c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80044f6:	4b68      	ldr	r3, [pc, #416]	; (8004698 <_SendPacket+0x1c0>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d109      	bne.n	8004512 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80044fe:	f7ff ff79 	bl	80043f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004502:	4b65      	ldr	r3, [pc, #404]	; (8004698 <_SendPacket+0x1c0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	f040 809a 	bne.w	8004640 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800450c:	e001      	b.n	8004512 <_SendPacket+0x3a>
    goto Send;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <_SendPacket+0x3c>
Send:
 8004512:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b1f      	cmp	r3, #31
 8004518:	d809      	bhi.n	800452e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800451a:	4b5f      	ldr	r3, [pc, #380]	; (8004698 <_SendPacket+0x1c0>)
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	f040 808b 	bne.w	8004644 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b17      	cmp	r3, #23
 8004532:	d807      	bhi.n	8004544 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e03d      	b.n	80045c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b7f      	cmp	r3, #127	; 0x7f
 8004550:	d912      	bls.n	8004578 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	09da      	lsrs	r2, r3, #7
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3b01      	subs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	3a01      	subs	r2, #1
 800456a:	60fa      	str	r2, [r7, #12]
 800456c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e006      	b.n	8004586 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b7f      	cmp	r3, #127	; 0x7f
 800458a:	d912      	bls.n	80045b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	09da      	lsrs	r2, r3, #7
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3b01      	subs	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	3a01      	subs	r2, #1
 80045a4:	60fa      	str	r2, [r7, #12]
 80045a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e006      	b.n	80045c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045c0:	4b36      	ldr	r3, [pc, #216]	; (800469c <_SendPacket+0x1c4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045c6:	4b34      	ldr	r3, [pc, #208]	; (8004698 <_SendPacket+0x1c0>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	e00b      	b.n	80045f2 <_SendPacket+0x11a>
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1c59      	adds	r1, r3, #1
 80045e2:	6279      	str	r1, [r7, #36]	; 0x24
 80045e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	09db      	lsrs	r3, r3, #7
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	2b7f      	cmp	r3, #127	; 0x7f
 80045f6:	d8f0      	bhi.n	80045da <_SendPacket+0x102>
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	627a      	str	r2, [r7, #36]	; 0x24
 80045fe:	6a3a      	ldr	r2, [r7, #32]
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004608:	4b23      	ldr	r3, [pc, #140]	; (8004698 <_SendPacket+0x1c0>)
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	4618      	mov	r0, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	461a      	mov	r2, r3
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	f7fb fdfa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800461c:	4603      	mov	r3, r0
 800461e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004626:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <_SendPacket+0x1c0>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	60d3      	str	r3, [r2, #12]
 800462c:	e00b      	b.n	8004646 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800462e:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <_SendPacket+0x1c0>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <_SendPacket+0x1c0>)
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e004      	b.n	8004646 <_SendPacket+0x16e>
    goto SendDone;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <_SendPacket+0x16e>
      goto SendDone;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <_SendPacket+0x16e>
      goto SendDone;
 8004644:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <_SendPacket+0x1c0>)
 8004648:	7e1b      	ldrb	r3, [r3, #24]
 800464a:	4619      	mov	r1, r3
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <_SendPacket+0x1c8>)
 800464e:	460b      	mov	r3, r1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	440b      	add	r3, r1
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	336c      	adds	r3, #108	; 0x6c
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <_SendPacket+0x1c0>)
 800465e:	7e1b      	ldrb	r3, [r3, #24]
 8004660:	4618      	mov	r0, r3
 8004662:	490f      	ldr	r1, [pc, #60]	; (80046a0 <_SendPacket+0x1c8>)
 8004664:	4603      	mov	r3, r0
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4403      	add	r3, r0
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	3370      	adds	r3, #112	; 0x70
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d00b      	beq.n	800468e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <_SendPacket+0x1c0>)
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d107      	bne.n	800468e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <_SendPacket+0x1c0>)
 8004680:	2201      	movs	r2, #1
 8004682:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004684:	f7ff fe4a 	bl	800431c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <_SendPacket+0x1c0>)
 800468a:	2200      	movs	r2, #0
 800468c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800468e:	bf00      	nop
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20014218 	.word	0x20014218
 800469c:	e0001004 	.word	0xe0001004
 80046a0:	2001437c 	.word	0x2001437c

080046a4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b0a2      	sub	sp, #136	; 0x88
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 80046ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 80046c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01e      	beq.n	800470c <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 80046ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046d2:	2b25      	cmp	r3, #37	; 0x25
 80046d4:	d1f1      	bne.n	80046ba <_VPrintHost+0x16>
      c = *p;
 80046d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	1d19      	adds	r1, r3, #4
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6011      	str	r1, [r2, #0]
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046f4:	460a      	mov	r2, r1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80046fc:	440b      	add	r3, r1
 80046fe:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8004702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004706:	2b10      	cmp	r3, #16
 8004708:	d002      	beq.n	8004710 <_VPrintHost+0x6c>
    c = *p++;
 800470a:	e7d6      	b.n	80046ba <_VPrintHost+0x16>
      break;
 800470c:	bf00      	nop
 800470e:	e000      	b.n	8004712 <_VPrintHost+0x6e>
        break;
 8004710:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8004712:	f3ef 8311 	mrs	r3, BASEPRI
 8004716:	f04f 0120 	mov.w	r1, #32
 800471a:	f381 8811 	msr	BASEPRI, r1
 800471e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004720:	483f      	ldr	r0, [pc, #252]	; (8004820 <_VPrintHost+0x17c>)
 8004722:	f7ff fdef 	bl	8004304 <_PreparePacket>
 8004726:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800472e:	f7ff fd99 	bl	8004264 <_EncodeStr>
 8004732:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8004734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004736:	677b      	str	r3, [r7, #116]	; 0x74
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	673b      	str	r3, [r7, #112]	; 0x70
 800473c:	e00b      	b.n	8004756 <_VPrintHost+0xb2>
 800473e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004740:	b2da      	uxtb	r2, r3
 8004742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004744:	1c59      	adds	r1, r3, #1
 8004746:	6779      	str	r1, [r7, #116]	; 0x74
 8004748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004752:	09db      	lsrs	r3, r3, #7
 8004754:	673b      	str	r3, [r7, #112]	; 0x70
 8004756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004758:	2b7f      	cmp	r3, #127	; 0x7f
 800475a:	d8f0      	bhi.n	800473e <_VPrintHost+0x9a>
 800475c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	677a      	str	r2, [r7, #116]	; 0x74
 8004762:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476a:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004774:	66bb      	str	r3, [r7, #104]	; 0x68
 8004776:	e00b      	b.n	8004790 <_VPrintHost+0xec>
 8004778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800477a:	b2da      	uxtb	r2, r3
 800477c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477e:	1c59      	adds	r1, r3, #1
 8004780:	66f9      	str	r1, [r7, #108]	; 0x6c
 8004782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004792:	2b7f      	cmp	r3, #127	; 0x7f
 8004794:	d8f0      	bhi.n	8004778 <_VPrintHost+0xd4>
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800479c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a4:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80047ae:	e022      	b.n	80047f6 <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 80047b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b2:	667b      	str	r3, [r7, #100]	; 0x64
 80047b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	663b      	str	r3, [r7, #96]	; 0x60
 80047bc:	e00b      	b.n	80047d6 <_VPrintHost+0x132>
 80047be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047c4:	1c59      	adds	r1, r3, #1
 80047c6:	6679      	str	r1, [r7, #100]	; 0x64
 80047c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d2:	09db      	lsrs	r3, r3, #7
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d8:	2b7f      	cmp	r3, #127	; 0x7f
 80047da:	d8f0      	bhi.n	80047be <_VPrintHost+0x11a>
 80047dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	667a      	str	r2, [r7, #100]	; 0x64
 80047e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ea:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 80047ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f0:	3304      	adds	r3, #4
 80047f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80047f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047fa:	1e5a      	subs	r2, r3, #1
 80047fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1d5      	bne.n	80047b0 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004804:	221a      	movs	r2, #26
 8004806:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004808:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800480a:	f7ff fe65 	bl	80044d8 <_SendPacket>
    RECORD_END();
 800480e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004810:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3788      	adds	r7, #136	; 0x88
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20014248 	.word	0x20014248

08004824 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004832:	2300      	movs	r3, #0
 8004834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004838:	4917      	ldr	r1, [pc, #92]	; (8004898 <SEGGER_SYSVIEW_Init+0x74>)
 800483a:	4818      	ldr	r0, [pc, #96]	; (800489c <SEGGER_SYSVIEW_Init+0x78>)
 800483c:	f7ff fc42 	bl	80040c4 <SEGGER_RTT_AllocUpBuffer>
 8004840:	4603      	mov	r3, r0
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004846:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800484a:	785a      	ldrb	r2, [r3, #1]
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800484e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004852:	7e1b      	ldrb	r3, [r3, #24]
 8004854:	4618      	mov	r0, r3
 8004856:	2300      	movs	r3, #0
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	2308      	movs	r3, #8
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <SEGGER_SYSVIEW_Init+0x80>)
 800485e:	490f      	ldr	r1, [pc, #60]	; (800489c <SEGGER_SYSVIEW_Init+0x78>)
 8004860:	f7ff fcb4 	bl	80041cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <SEGGER_SYSVIEW_Init+0x84>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004870:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800487e:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004884:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20013210 	.word	0x20013210
 800489c:	0800578c 	.word	0x0800578c
 80048a0:	20014218 	.word	0x20014218
 80048a4:	20014210 	.word	0x20014210
 80048a8:	e0001004 	.word	0xe0001004

080048ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6113      	str	r3, [r2, #16]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20014218 	.word	0x20014218

080048cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048d4:	f3ef 8311 	mrs	r3, BASEPRI
 80048d8:	f04f 0120 	mov.w	r1, #32
 80048dc:	f381 8811 	msr	BASEPRI, r1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	4808      	ldr	r0, [pc, #32]	; (8004904 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80048e4:	f7ff fd0e 	bl	8004304 <_PreparePacket>
 80048e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68b8      	ldr	r0, [r7, #8]
 80048f0:	f7ff fdf2 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f383 8811 	msr	BASEPRI, r3
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20014248 	.word	0x20014248

08004908 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004912:	f3ef 8311 	mrs	r3, BASEPRI
 8004916:	f04f 0120 	mov.w	r1, #32
 800491a:	f381 8811 	msr	BASEPRI, r1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	4816      	ldr	r0, [pc, #88]	; (800497c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004922:	f7ff fcef 	bl	8004304 <_PreparePacket>
 8004926:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e00b      	b.n	800494e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	1c59      	adds	r1, r3, #1
 800493e:	61f9      	str	r1, [r7, #28]
 8004940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	09db      	lsrs	r3, r3, #7
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b7f      	cmp	r3, #127	; 0x7f
 8004952:	d8f0      	bhi.n	8004936 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	61fa      	str	r2, [r7, #28]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	6938      	ldr	r0, [r7, #16]
 800496a:	f7ff fdb5 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f383 8811 	msr	BASEPRI, r3
}
 8004974:	bf00      	nop
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20014248 	.word	0x20014248

08004980 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800498c:	f3ef 8311 	mrs	r3, BASEPRI
 8004990:	f04f 0120 	mov.w	r1, #32
 8004994:	f381 8811 	msr	BASEPRI, r1
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	4825      	ldr	r0, [pc, #148]	; (8004a30 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800499c:	f7ff fcb2 	bl	8004304 <_PreparePacket>
 80049a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ae:	e00b      	b.n	80049c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	09db      	lsrs	r3, r3, #7
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	2b7f      	cmp	r3, #127	; 0x7f
 80049cc:	d8f0      	bhi.n	80049b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	e00b      	b.n	8004a00 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1c59      	adds	r1, r3, #1
 80049f0:	6279      	str	r1, [r7, #36]	; 0x24
 80049f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	09db      	lsrs	r3, r3, #7
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b7f      	cmp	r3, #127	; 0x7f
 8004a04:	d8f0      	bhi.n	80049e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	69b8      	ldr	r0, [r7, #24]
 8004a1c:	f7ff fd5c 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f383 8811 	msr	BASEPRI, r3
}
 8004a26:	bf00      	nop
 8004a28:	3730      	adds	r7, #48	; 0x30
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20014248 	.word	0x20014248

08004a34 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004a3a:	4b58      	ldr	r3, [pc, #352]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004a40:	f3ef 8311 	mrs	r3, BASEPRI
 8004a44:	f04f 0120 	mov.w	r1, #32
 8004a48:	f381 8811 	msr	BASEPRI, r1
 8004a4c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004a4e:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	220a      	movs	r2, #10
 8004a54:	4952      	ldr	r1, [pc, #328]	; (8004ba0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fbda 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004a62:	200a      	movs	r0, #10
 8004a64:	f7ff ff32 	bl	80048cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a68:	f3ef 8311 	mrs	r3, BASEPRI
 8004a6c:	f04f 0120 	mov.w	r1, #32
 8004a70:	f381 8811 	msr	BASEPRI, r1
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	484b      	ldr	r0, [pc, #300]	; (8004ba4 <SEGGER_SYSVIEW_Start+0x170>)
 8004a78:	f7ff fc44 	bl	8004304 <_PreparePacket>
 8004a7c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a86:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8c:	e00b      	b.n	8004aa6 <SEGGER_SYSVIEW_Start+0x72>
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	09db      	lsrs	r3, r3, #7
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aaa:	d8f0      	bhi.n	8004a8e <SEGGER_SYSVIEW_Start+0x5a>
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	e00b      	b.n	8004ae0 <SEGGER_SYSVIEW_Start+0xac>
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	6279      	str	r1, [r7, #36]	; 0x24
 8004ad2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	09db      	lsrs	r3, r3, #7
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae4:	d8f0      	bhi.n	8004ac8 <SEGGER_SYSVIEW_Start+0x94>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	627a      	str	r2, [r7, #36]	; 0x24
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e00b      	b.n	8004b1a <SEGGER_SYSVIEW_Start+0xe6>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	1c59      	adds	r1, r3, #1
 8004b0a:	61f9      	str	r1, [r7, #28]
 8004b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	09db      	lsrs	r3, r3, #7
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b1e:	d8f0      	bhi.n	8004b02 <SEGGER_SYSVIEW_Start+0xce>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	61fa      	str	r2, [r7, #28]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	e00b      	b.n	8004b52 <SEGGER_SYSVIEW_Start+0x11e>
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	1c59      	adds	r1, r3, #1
 8004b42:	6179      	str	r1, [r7, #20]
 8004b44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	09db      	lsrs	r3, r3, #7
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b7f      	cmp	r3, #127	; 0x7f
 8004b56:	d8f0      	bhi.n	8004b3a <SEGGER_SYSVIEW_Start+0x106>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	617a      	str	r2, [r7, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b68:	2218      	movs	r2, #24
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fcb3 	bl	80044d8 <_SendPacket>
      RECORD_END();
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <SEGGER_SYSVIEW_Start+0x168>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004b86:	f000 f9eb 	bl	8004f60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004b8a:	f000 f9b1 	bl	8004ef0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004b8e:	f000 fc71 	bl	8005474 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004b92:	bf00      	nop
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20014218 	.word	0x20014218
 8004ba0:	080057b4 	.word	0x080057b4
 8004ba4:	20014248 	.word	0x20014248

08004ba8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bae:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb2:	f04f 0120 	mov.w	r1, #32
 8004bb6:	f381 8811 	msr	BASEPRI, r1
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	480b      	ldr	r0, [pc, #44]	; (8004bec <SEGGER_SYSVIEW_Stop+0x44>)
 8004bbe:	f7ff fba1 	bl	8004304 <_PreparePacket>
 8004bc2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <SEGGER_SYSVIEW_Stop+0x48>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004bcc:	220b      	movs	r2, #11
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	6838      	ldr	r0, [r7, #0]
 8004bd2:	f7ff fc81 	bl	80044d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <SEGGER_SYSVIEW_Stop+0x48>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f383 8811 	msr	BASEPRI, r3
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20014248 	.word	0x20014248
 8004bf0:	20014218 	.word	0x20014218

08004bf4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	; 0x30
 8004bf8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8004bfe:	f04f 0120 	mov.w	r1, #32
 8004c02:	f381 8811 	msr	BASEPRI, r1
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	4845      	ldr	r0, [pc, #276]	; (8004d20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c0a:	f7ff fb7b 	bl	8004304 <_PreparePacket>
 8004c0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1e:	e00b      	b.n	8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	09db      	lsrs	r3, r3, #7
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c3c:	d8f0      	bhi.n	8004c20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	e00b      	b.n	8004c72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1c59      	adds	r1, r3, #1
 8004c62:	6279      	str	r1, [r7, #36]	; 0x24
 8004c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	09db      	lsrs	r3, r3, #7
 8004c70:	623b      	str	r3, [r7, #32]
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	2b7f      	cmp	r3, #127	; 0x7f
 8004c76:	d8f0      	bhi.n	8004c5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c7e:	6a3a      	ldr	r2, [r7, #32]
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e00b      	b.n	8004cac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1c59      	adds	r1, r3, #1
 8004c9c:	61f9      	str	r1, [r7, #28]
 8004c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	09db      	lsrs	r3, r3, #7
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb0:	d8f0      	bhi.n	8004c94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	61fa      	str	r2, [r7, #28]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e00b      	b.n	8004ce4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	6179      	str	r1, [r7, #20]
 8004cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	09db      	lsrs	r3, r3, #7
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce8:	d8f0      	bhi.n	8004ccc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	617a      	str	r2, [r7, #20]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004cfa:	2218      	movs	r2, #24
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68b8      	ldr	r0, [r7, #8]
 8004d00:	f7ff fbea 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d12:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	4798      	blx	r3
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3730      	adds	r7, #48	; 0x30
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20014248 	.word	0x20014248
 8004d24:	20014218 	.word	0x20014218

08004d28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b092      	sub	sp, #72	; 0x48
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d30:	f3ef 8311 	mrs	r3, BASEPRI
 8004d34:	f04f 0120 	mov.w	r1, #32
 8004d38:	f381 8811 	msr	BASEPRI, r1
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	486a      	ldr	r0, [pc, #424]	; (8004ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004d40:	f7ff fae0 	bl	8004304 <_PreparePacket>
 8004d44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b66      	ldr	r3, [pc, #408]	; (8004eec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
 8004d5a:	e00b      	b.n	8004d74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	6479      	str	r1, [r7, #68]	; 0x44
 8004d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d70:	09db      	lsrs	r3, r3, #7
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
 8004d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d8f0      	bhi.n	8004d5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d94:	e00b      	b.n	8004dae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	1c59      	adds	r1, r3, #1
 8004d9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	09db      	lsrs	r3, r3, #7
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2b7f      	cmp	r3, #127	; 0x7f
 8004db2:	d8f0      	bhi.n	8004d96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	4619      	mov	r1, r3
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff fa49 	bl	8004264 <_EncodeStr>
 8004dd2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004dd4:	2209      	movs	r2, #9
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	6938      	ldr	r0, [r7, #16]
 8004dda:	f7ff fb7d 	bl	80044d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b40      	ldr	r3, [pc, #256]	; (8004eec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	633b      	str	r3, [r7, #48]	; 0x30
 8004df2:	e00b      	b.n	8004e0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	6379      	str	r1, [r7, #52]	; 0x34
 8004dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	09db      	lsrs	r3, r3, #7
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e10:	d8f0      	bhi.n	8004df4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	637a      	str	r2, [r7, #52]	; 0x34
 8004e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2c:	e00b      	b.n	8004e46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4a:	d8f0      	bhi.n	8004e2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	e00b      	b.n	8004e80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	6279      	str	r1, [r7, #36]	; 0x24
 8004e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	09db      	lsrs	r3, r3, #7
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b7f      	cmp	r3, #127	; 0x7f
 8004e84:	d8f0      	bhi.n	8004e68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e00b      	b.n	8004eb8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	1c59      	adds	r1, r3, #1
 8004ea8:	61f9      	str	r1, [r7, #28]
 8004eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	09db      	lsrs	r3, r3, #7
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebc:	d8f0      	bhi.n	8004ea0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	61fa      	str	r2, [r7, #28]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004ece:	2215      	movs	r2, #21
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	6938      	ldr	r0, [r7, #16]
 8004ed4:	f7ff fb00 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f383 8811 	msr	BASEPRI, r3
}
 8004ede:	bf00      	nop
 8004ee0:	3748      	adds	r7, #72	; 0x48
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20014248 	.word	0x20014248
 8004eec:	20014218 	.word	0x20014218

08004ef0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f06:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4798      	blx	r3
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20014218 	.word	0x20014218

08004f18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f20:	f3ef 8311 	mrs	r3, BASEPRI
 8004f24:	f04f 0120 	mov.w	r1, #32
 8004f28:	f381 8811 	msr	BASEPRI, r1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	480b      	ldr	r0, [pc, #44]	; (8004f5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004f30:	f7ff f9e8 	bl	8004304 <_PreparePacket>
 8004f34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f36:	2280      	movs	r2, #128	; 0x80
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f7ff f992 	bl	8004264 <_EncodeStr>
 8004f40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004f42:	220e      	movs	r2, #14
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	6938      	ldr	r0, [r7, #16]
 8004f48:	f7ff fac6 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f383 8811 	msr	BASEPRI, r3
}
 8004f52:	bf00      	nop
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20014248 	.word	0x20014248

08004f60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d019      	beq.n	8004fa2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d014      	beq.n	8004fa2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4798      	blx	r3
 8004f80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f84:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004f86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	f04f 0400 	mov.w	r4, #0
 8004f92:	0013      	movs	r3, r2
 8004f94:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f96:	461a      	mov	r2, r3
 8004f98:	4601      	mov	r1, r0
 8004f9a:	200d      	movs	r0, #13
 8004f9c:	f7ff fcf0 	bl	8004980 <SEGGER_SYSVIEW_RecordU32x2>
 8004fa0:	e005      	b.n	8004fae <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	200c      	movs	r0, #12
 8004faa:	f7ff fcad 	bl	8004908 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd90      	pop	{r4, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20014218 	.word	0x20014218
 8004fbc:	e0001004 	.word	0xe0001004

08004fc0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fca:	f04f 0120 	mov.w	r1, #32
 8004fce:	f381 8811 	msr	BASEPRI, r1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	4819      	ldr	r0, [pc, #100]	; (800503c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004fd6:	f7ff f995 	bl	8004304 <_PreparePacket>
 8004fda:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e00b      	b.n	800500c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	6179      	str	r1, [r7, #20]
 8004ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b7f      	cmp	r3, #127	; 0x7f
 8005010:	d8f0      	bhi.n	8004ff4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	617a      	str	r2, [r7, #20]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005022:	2202      	movs	r2, #2
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	68b8      	ldr	r0, [r7, #8]
 8005028:	f7ff fa56 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f383 8811 	msr	BASEPRI, r3
}
 8005032:	bf00      	nop
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20014248 	.word	0x20014248
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800504a:	f3ef 8311 	mrs	r3, BASEPRI
 800504e:	f04f 0120 	mov.w	r1, #32
 8005052:	f381 8811 	msr	BASEPRI, r1
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	4807      	ldr	r0, [pc, #28]	; (8005078 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800505a:	f7ff f953 	bl	8004304 <_PreparePacket>
 800505e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005060:	2203      	movs	r2, #3
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f7ff fa37 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f383 8811 	msr	BASEPRI, r3
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20014248 	.word	0x20014248

0800507c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005082:	f3ef 8311 	mrs	r3, BASEPRI
 8005086:	f04f 0120 	mov.w	r1, #32
 800508a:	f381 8811 	msr	BASEPRI, r1
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	4807      	ldr	r0, [pc, #28]	; (80050b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005092:	f7ff f937 	bl	8004304 <_PreparePacket>
 8005096:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005098:	2212      	movs	r2, #18
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6838      	ldr	r0, [r7, #0]
 800509e:	f7ff fa1b 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f383 8811 	msr	BASEPRI, r3
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20014248 	.word	0x20014248

080050b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050ba:	f3ef 8311 	mrs	r3, BASEPRI
 80050be:	f04f 0120 	mov.w	r1, #32
 80050c2:	f381 8811 	msr	BASEPRI, r1
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	4807      	ldr	r0, [pc, #28]	; (80050e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80050ca:	f7ff f91b 	bl	8004304 <_PreparePacket>
 80050ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80050d0:	2211      	movs	r2, #17
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	6838      	ldr	r0, [r7, #0]
 80050d6:	f7ff f9ff 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f383 8811 	msr	BASEPRI, r3
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20014248 	.word	0x20014248

080050ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050f4:	f3ef 8311 	mrs	r3, BASEPRI
 80050f8:	f04f 0120 	mov.w	r1, #32
 80050fc:	f381 8811 	msr	BASEPRI, r1
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	4819      	ldr	r0, [pc, #100]	; (8005168 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005104:	f7ff f8fe 	bl	8004304 <_PreparePacket>
 8005108:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800510e:	4b17      	ldr	r3, [pc, #92]	; (800516c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e00b      	b.n	800513a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	61f9      	str	r1, [r7, #28]
 800512c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	09db      	lsrs	r3, r3, #7
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b7f      	cmp	r3, #127	; 0x7f
 800513e:	d8f0      	bhi.n	8005122 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	61fa      	str	r2, [r7, #28]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005150:	2208      	movs	r2, #8
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	6938      	ldr	r0, [r7, #16]
 8005156:	f7ff f9bf 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f383 8811 	msr	BASEPRI, r3
}
 8005160:	bf00      	nop
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20014248 	.word	0x20014248
 800516c:	20014218 	.word	0x20014218

08005170 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005178:	f3ef 8311 	mrs	r3, BASEPRI
 800517c:	f04f 0120 	mov.w	r1, #32
 8005180:	f381 8811 	msr	BASEPRI, r1
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	4819      	ldr	r0, [pc, #100]	; (80051ec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005188:	f7ff f8bc 	bl	8004304 <_PreparePacket>
 800518c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005192:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	e00b      	b.n	80051be <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1c59      	adds	r1, r3, #1
 80051ae:	61f9      	str	r1, [r7, #28]
 80051b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b7f      	cmp	r3, #127	; 0x7f
 80051c2:	d8f0      	bhi.n	80051a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	61fa      	str	r2, [r7, #28]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80051d4:	2204      	movs	r2, #4
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	6938      	ldr	r0, [r7, #16]
 80051da:	f7ff f97d 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f383 8811 	msr	BASEPRI, r3
}
 80051e4:	bf00      	nop
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20014248 	.word	0x20014248
 80051f0:	20014218 	.word	0x20014218

080051f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005200:	f04f 0120 	mov.w	r1, #32
 8005204:	f381 8811 	msr	BASEPRI, r1
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	4819      	ldr	r0, [pc, #100]	; (8005270 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800520c:	f7ff f87a 	bl	8004304 <_PreparePacket>
 8005210:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005216:	4b17      	ldr	r3, [pc, #92]	; (8005274 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	e00b      	b.n	8005242 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	1c59      	adds	r1, r3, #1
 8005232:	61f9      	str	r1, [r7, #28]
 8005234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	09db      	lsrs	r3, r3, #7
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b7f      	cmp	r3, #127	; 0x7f
 8005246:	d8f0      	bhi.n	800522a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	61fa      	str	r2, [r7, #28]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005258:	2206      	movs	r2, #6
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	6938      	ldr	r0, [r7, #16]
 800525e:	f7ff f93b 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f383 8811 	msr	BASEPRI, r3
}
 8005268:	bf00      	nop
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20014248 	.word	0x20014248
 8005274:	20014218 	.word	0x20014218

08005278 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005282:	f3ef 8311 	mrs	r3, BASEPRI
 8005286:	f04f 0120 	mov.w	r1, #32
 800528a:	f381 8811 	msr	BASEPRI, r1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	4827      	ldr	r0, [pc, #156]	; (8005330 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005292:	f7ff f837 	bl	8004304 <_PreparePacket>
 8005296:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	e00b      	b.n	80052c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	6279      	str	r1, [r7, #36]	; 0x24
 80052ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b7f      	cmp	r3, #127	; 0x7f
 80052cc:	d8f0      	bhi.n	80052b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	627a      	str	r2, [r7, #36]	; 0x24
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e00b      	b.n	8005300 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	61f9      	str	r1, [r7, #28]
 80052f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	09db      	lsrs	r3, r3, #7
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b7f      	cmp	r3, #127	; 0x7f
 8005304:	d8f0      	bhi.n	80052e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	61fa      	str	r2, [r7, #28]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005316:	2207      	movs	r2, #7
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	6938      	ldr	r0, [r7, #16]
 800531c:	f7ff f8dc 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f383 8811 	msr	BASEPRI, r3
}
 8005326:	bf00      	nop
 8005328:	3728      	adds	r7, #40	; 0x28
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20014248 	.word	0x20014248
 8005334:	20014218 	.word	0x20014218

08005338 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	; 0x30
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005342:	4b3b      	ldr	r3, [pc, #236]	; (8005430 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d06d      	beq.n	8005426 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	e008      	b.n	8005368 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	3301      	adds	r3, #1
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536c:	429a      	cmp	r2, r3
 800536e:	d3f2      	bcc.n	8005356 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005370:	e000      	b.n	8005374 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005372:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d055      	beq.n	8005426 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800537a:	f3ef 8311 	mrs	r3, BASEPRI
 800537e:	f04f 0120 	mov.w	r1, #32
 8005382:	f381 8811 	msr	BASEPRI, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	482a      	ldr	r0, [pc, #168]	; (8005434 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800538a:	f7fe ffbb 	bl	8004304 <_PreparePacket>
 800538e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	e00b      	b.n	80053b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1c59      	adds	r1, r3, #1
 80053a6:	6279      	str	r1, [r7, #36]	; 0x24
 80053a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	09db      	lsrs	r3, r3, #7
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ba:	d8f0      	bhi.n	800539e <SEGGER_SYSVIEW_SendModule+0x66>
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	627a      	str	r2, [r7, #36]	; 0x24
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e00b      	b.n	80053f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	1c59      	adds	r1, r3, #1
 80053e0:	61f9      	str	r1, [r7, #28]
 80053e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	09db      	lsrs	r3, r3, #7
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b7f      	cmp	r3, #127	; 0x7f
 80053f4:	d8f0      	bhi.n	80053d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	61fa      	str	r2, [r7, #28]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	4619      	mov	r1, r3
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7fe ff28 	bl	8004264 <_EncodeStr>
 8005414:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005416:	2216      	movs	r2, #22
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	6938      	ldr	r0, [r7, #16]
 800541c:	f7ff f85c 	bl	80044d8 <_SendPacket>
      RECORD_END();
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005426:	bf00      	nop
 8005428:	3730      	adds	r7, #48	; 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20014240 	.word	0x20014240
 8005434:	20014248 	.word	0x20014248

08005438 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00f      	beq.n	8005466 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f2      	bne.n	800544c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20014240 	.word	0x20014240

08005474 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800547a:	f3ef 8311 	mrs	r3, BASEPRI
 800547e:	f04f 0120 	mov.w	r1, #32
 8005482:	f381 8811 	msr	BASEPRI, r1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	4817      	ldr	r0, [pc, #92]	; (80054e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800548a:	f7fe ff3b 	bl	8004304 <_PreparePacket>
 800548e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	4b14      	ldr	r3, [pc, #80]	; (80054ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	e00b      	b.n	80054b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	6179      	str	r1, [r7, #20]
 80054aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b7f      	cmp	r3, #127	; 0x7f
 80054bc:	d8f0      	bhi.n	80054a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	617a      	str	r2, [r7, #20]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80054ce:	221b      	movs	r2, #27
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	68b8      	ldr	r0, [r7, #8]
 80054d4:	f7ff f800 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f383 8811 	msr	BASEPRI, r3
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20014248 	.word	0x20014248
 80054ec:	20014244 	.word	0x20014244

080054f0 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80054f0:	b40f      	push	{r0, r1, r2, r3}
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	461a      	mov	r2, r3
 8005502:	2100      	movs	r1, #0
 8005504:	6938      	ldr	r0, [r7, #16]
 8005506:	f7ff f8cd 	bl	80046a4 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr

08005518 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005520:	f3ef 8311 	mrs	r3, BASEPRI
 8005524:	f04f 0120 	mov.w	r1, #32
 8005528:	f381 8811 	msr	BASEPRI, r1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	4827      	ldr	r0, [pc, #156]	; (80055cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005530:	f7fe fee8 	bl	8004304 <_PreparePacket>
 8005534:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005536:	2280      	movs	r2, #128	; 0x80
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	6938      	ldr	r0, [r7, #16]
 800553c:	f7fe fe92 	bl	8004264 <_EncodeStr>
 8005540:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	2301      	movs	r3, #1
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	e00b      	b.n	8005564 <SEGGER_SYSVIEW_Warn+0x4c>
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	6279      	str	r1, [r7, #36]	; 0x24
 8005556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	09db      	lsrs	r3, r3, #7
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2b7f      	cmp	r3, #127	; 0x7f
 8005568:	d8f0      	bhi.n	800554c <SEGGER_SYSVIEW_Warn+0x34>
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	627a      	str	r2, [r7, #36]	; 0x24
 8005570:	6a3a      	ldr	r2, [r7, #32]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	e00b      	b.n	800559c <SEGGER_SYSVIEW_Warn+0x84>
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	61f9      	str	r1, [r7, #28]
 800558e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	09db      	lsrs	r3, r3, #7
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b7f      	cmp	r3, #127	; 0x7f
 80055a0:	d8f0      	bhi.n	8005584 <SEGGER_SYSVIEW_Warn+0x6c>
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	61fa      	str	r2, [r7, #28]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055b2:	221a      	movs	r2, #26
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	6938      	ldr	r0, [r7, #16]
 80055b8:	f7fe ff8e 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f383 8811 	msr	BASEPRI, r3
}
 80055c2:	bf00      	nop
 80055c4:	3728      	adds	r7, #40	; 0x28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20014248 	.word	0x20014248

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4e0d      	ldr	r6, [pc, #52]	; (8005608 <__libc_init_array+0x38>)
 80055d4:	4c0d      	ldr	r4, [pc, #52]	; (800560c <__libc_init_array+0x3c>)
 80055d6:	1ba4      	subs	r4, r4, r6
 80055d8:	10a4      	asrs	r4, r4, #2
 80055da:	2500      	movs	r5, #0
 80055dc:	42a5      	cmp	r5, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	4e0b      	ldr	r6, [pc, #44]	; (8005610 <__libc_init_array+0x40>)
 80055e2:	4c0c      	ldr	r4, [pc, #48]	; (8005614 <__libc_init_array+0x44>)
 80055e4:	f000 f83a 	bl	800565c <_init>
 80055e8:	1ba4      	subs	r4, r4, r6
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	2500      	movs	r5, #0
 80055ee:	42a5      	cmp	r5, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055f8:	4798      	blx	r3
 80055fa:	3501      	adds	r5, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005602:	4798      	blx	r3
 8005604:	3501      	adds	r5, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	080057c8 	.word	0x080057c8
 800560c:	080057c8 	.word	0x080057c8
 8005610:	080057c8 	.word	0x080057c8
 8005614:	080057cc 	.word	0x080057cc

08005618 <memcmp>:
 8005618:	b530      	push	{r4, r5, lr}
 800561a:	2400      	movs	r4, #0
 800561c:	42a2      	cmp	r2, r4
 800561e:	d101      	bne.n	8005624 <memcmp+0xc>
 8005620:	2000      	movs	r0, #0
 8005622:	e007      	b.n	8005634 <memcmp+0x1c>
 8005624:	5d03      	ldrb	r3, [r0, r4]
 8005626:	3401      	adds	r4, #1
 8005628:	190d      	adds	r5, r1, r4
 800562a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800562e:	42ab      	cmp	r3, r5
 8005630:	d0f4      	beq.n	800561c <memcmp+0x4>
 8005632:	1b58      	subs	r0, r3, r5
 8005634:	bd30      	pop	{r4, r5, pc}

08005636 <memcpy>:
 8005636:	b510      	push	{r4, lr}
 8005638:	1e43      	subs	r3, r0, #1
 800563a:	440a      	add	r2, r1
 800563c:	4291      	cmp	r1, r2
 800563e:	d100      	bne.n	8005642 <memcpy+0xc>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564a:	e7f7      	b.n	800563c <memcpy+0x6>

0800564c <memset>:
 800564c:	4402      	add	r2, r0
 800564e:	4603      	mov	r3, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <_init>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr

08005668 <_fini>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr
